{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/TIL/TIL-2022-05/TIL-220503/",
    "result": {"data":{"cur":{"id":"9e16d511-2f8d-53ed-96a2-981cbb0699e1","html":"<h2 id=\"오늘-공부한-react-예제-코드-살펴보기\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%8A%98-%EA%B3%B5%EB%B6%80%ED%95%9C-react-%EC%98%88%EC%A0%9C-%EC%BD%94%EB%93%9C-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"오늘 공부한 react 예제 코드 살펴보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오늘 공부한 React 예제 코드 살펴보기</h2>\n<h3 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h3>\n<p>React(리액트) 할 줄 아는 프론트엔드 개발자가 되고 싶어 요즘 Udemy에서 <a href=\"https://www.udemy.com/course/react-the-complete-guide-incl-redux/\">React - The Complete Guide (incl Hooks, React Router, Redux)</a> 강의를 듣고 있다. 오늘 들은 <code class=\"language-text\">Custom Hooks</code> 관련 강의 중에 나온 App.js 예제 코드를 살펴보자. (설명은 주석으로)</p>\n<h3 id=\"예제코드\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C%EC%BD%94%EB%93%9C\" aria-label=\"예제코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> Tasks <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Tasks/Tasks'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> NewTask <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/NewTask/NewTask'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isLoading<span class=\"token punctuation\">,</span> setIsLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Loading 상태를 나타내는 boolean state</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">,</span> setError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error 값을 갖는 state</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tasks<span class=\"token punctuation\">,</span> setTasks<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 일정(업무) 배열 값을 갖는 state</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchTasks</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">taskText</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 위에 초기값을 설정해줬지만 다시 렌더링할 때를 고려하여 초기화 해줌</span>\n    <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>\n        <span class=\"token comment\">// firebase에서 데이터 가져올 때 async-await를 사용하여 비동기처리가 되지 않도록 한다</span>\n        <span class=\"token string\">'https://react-prac-a1700-default-rtdb.asia-southeast1.firebasedatabase.app/tasks.json'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 응답을 못 받으면 에러를 던져 다음 코드를 실행하지 않도록 한다</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Request failed!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 응답의 json값을 data 변수에 넣는다</span>\n\n      <span class=\"token keyword\">const</span> loadedTasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 일정들을 담을 배열 선언</span>\n\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> taskKey <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 응답 받은 데이터들을 loadedTasks 배열에 담는다</span>\n        loadedTasks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> taskKey<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> data<span class=\"token punctuation\">[</span>taskKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>loadedTasks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// tasks state의 위에 담은 배열을 넣어준다</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message <span class=\"token operator\">||</span> <span class=\"token string\">'Something went wrong!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 에러 발생시 error state의 문자열값을 담는다</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 로딩 state false로 변경</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 함수 fetchTasks 호출한다. dependency가 빈 배열이기 때문에 렌더시 useEffect 안이 한번 만 실행된다</span>\n    <span class=\"token function\">fetchTasks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 아래 함수 호출 시 매개변수로 받은 일정(task)을 기존 tasks(배열) state에 추가한다</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">taskAddHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevTasks</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> prevTasks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 아래는 JSX, 컴포넌트들을 배치한다</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>NewTask onAddTask<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>taskAddHandler<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Tasks items<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>tasks<span class=\"token punctuation\">}</span> loading<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>isLoading<span class=\"token punctuation\">}</span> error<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>error<span class=\"token punctuation\">}</span> onFetch<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>fetchTasks<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"새로-배운-것\" style=\"position:relative;\"><a href=\"#%EC%83%88%EB%A1%9C-%EB%B0%B0%EC%9A%B4-%EA%B2%83\" aria-label=\"새로 배운 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>새로 배운 것</h3>\n<ul>\n<li>자바스크립트에 fetch를 이용하여 api서버에서 데이터를 가져올 수 있다.</li>\n<li>firebase를 통하여 아주 간단하게 api서버를 만든다(무료)</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%98%A4%EB%8A%98-%EA%B3%B5%EB%B6%80%ED%95%9C-react-%EC%98%88%EC%A0%9C-%EC%BD%94%EB%93%9C-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\">오늘 공부한 React 예제 코드 살펴보기</a></p>\n<ul>\n<li><a href=\"#%EA%B0%9C%EC%9A%94\">개요</a></li>\n<li><a href=\"#%EC%98%88%EC%A0%9C%EC%BD%94%EB%93%9C\">예제코드</a></li>\n<li><a href=\"#%EC%83%88%EB%A1%9C-%EB%B0%B0%EC%9A%B4-%EA%B2%83\">새로 배운 것</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"오늘 공부한 React 예제 코드 살펴보기 개요 React(리액트) 할 줄 아는 프론트엔드 개발자가 되고 싶어 요즘 Udemy에서 React - The Complete Guide (incl Hooks, React Router, Redux) 강의를 듣고 있다. 오늘 들은  관련 강의 중에 나온 App.js 예제 코드를 살펴보자. (설명은 주석으로) 예제코드 새로 배운 것 자바스크립트에 fetch를 이용하여 api서버에서 데이터를 가져올 수 있다. firebase를 통하여 아주 간단하게 api서버를 만든다(무료) 오늘 공부한 React 예제 코드 살펴보기 개요 예제코드 새로 배운 것","frontmatter":{"date":"May 03, 2022","title":"(TIL) React - 예제 App.js 코드 살펴보기","categories":"TIL REACT","author":"최중재(aziel)","emoji":"🌷"},"fields":{"slug":"/TIL/TIL-2022-05/TIL-220503/"}},"next":{"id":"54157e0f-4072-50c9-887e-569303b54bb1","html":"<h2 id=\"the-four-fs-facts-feelings-fidings-futures\" style=\"position:relative;\"><a href=\"#the-four-fs-facts-feelings-fidings-futures\" aria-label=\"the four fs facts feelings fidings futures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The four F’s (Facts, Feelings, Fidings, Futures)</h2>\n<h3 id=\"nextjs-2가지-pre-rendering\" style=\"position:relative;\"><a href=\"#nextjs-2%EA%B0%80%EC%A7%80-pre-rendering\" aria-label=\"nextjs 2가지 pre rendering permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next.js 2가지 Pre-rendering</h3>\n<p>Next.js에서는 2가지의 미리 렌더링 방법 있는데, 어떤 것들이 있는 지 확인 해 보자.</p>\n<ol>\n<li>SSG(Static Site Generation)</li>\n</ol>\n<ul>\n<li>이는 <code class=\"language-text\">빌드</code> 할 때 미리 HTML을 생성하고, 매 요청마다 생성된 HTML을 재사용 한다.</li>\n<li>마케팅 페이지, 블로그 글, 이커머스 상품 리스트, 도움말과 문서 같은 웹 페이지에 추천되는 방식이다.</li>\n<li><code class=\"language-text\">getStaticProps</code>을 통해 미리 외부 데이터를 가져와 렌더링에 사용한다. 아래는 그 예다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Home</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 파일 시스템, API, DB 등으로 부터 외부 데이터를 얻는다</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token operator\">...</span>\n\n  <span class=\"token comment\">// 'props' 라는 키의 값이 'Home' 컴포넌트에 전달 된다</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>SSR(Servier Side Rendering)</li>\n</ol>\n<ul>\n<li>이는 각 요청마다 HTML을 미리 생성한다.</li>\n<li>모든 요청마다 페이지 내용이 변화거나 자주 데이터의 변화를 보여줄 때 추천되는 방식이다.</li>\n<li>미리 렌더링하지 않는다면 CSR(Client Side Rendering)로 위의 방식을 해결 할 수도 있다.</li>\n<li><code class=\"language-text\">getServerSideProps</code>을 통해 매 요청마다 필요한 데이터를 가져와 렌더링에 사용한다. 아래는 그 예다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 렌더(render) 데이터 ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 매 요청(request) 마다 호출 되는 함수</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getServerSideProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 외부 API 로부터 데이터를 가져온다</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://.../data</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// props를 통해 page component에 데이터 전달</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Page<span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"3\">\n<li>참고</li>\n</ol>\n<ul>\n<li><a href=\"https://nextjs.org/learn/basics/data-fetching/two-forms\">Two Forms of Pre-rendering</a></li>\n<li><a href=\"https://nextjs.org/learn/basics/data-fetching/with-data\">Static Generation with and without Data</a></li>\n<li><a href=\"https://nextjs.org/docs/basic-features/data-fetching/get-server-side-props\">getServerSideProps</a></li>\n</ul>\n<h3 id=\"갖춰야-할-역량이-많구나\" style=\"position:relative;\"><a href=\"#%EA%B0%96%EC%B6%B0%EC%95%BC-%ED%95%A0-%EC%97%AD%EB%9F%89%EC%9D%B4-%EB%A7%8E%EA%B5%AC%EB%82%98\" aria-label=\"갖춰야 할 역량이 많구나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>갖춰야 할 역량이 많구나</h3>\n<p>스파르타 내배캠이 끝나고 취업을 향한 여정 중이다. 프론트 혹은 풀스택 개발자로 취업하기로 마음 먹었지만, 현업에서 요구하는 이들의 역량이 만만치가 않다. 그러다보니 시간은 한정되어 있고, 내가 매일 학습할 수 있는 양은 극히 일부분이니 마음이 조급해진다. 많은 기업들이 <code class=\"language-text\">빠른 학습 능력</code>을 갖춘 개발자를 선호 한다고 느꼈다. 현재 내게 주어진 이 기간이 그걸 시험하는 시기라고 여겨진다. 언제나 그랬듯 또 다짐해 본다. 멈추지 않고 꾸준히 하다보면 궤도에 오를 것이라고 말이다. 계속 가자!</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#the-four-fs-facts-feelings-fidings-futures\">The four F’s (Facts, Feelings, Fidings, Futures)</a></p>\n<ul>\n<li><a href=\"#nextjs-2%EA%B0%80%EC%A7%80-pre-rendering\">Next.js 2가지 Pre-rendering</a></li>\n<li><a href=\"#%EA%B0%96%EC%B6%B0%EC%95%BC-%ED%95%A0-%EC%97%AD%EB%9F%89%EC%9D%B4-%EB%A7%8E%EA%B5%AC%EB%82%98\">갖춰야 할 역량이 많구나</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"April 24, 2022","title":"(WIL) Next.js 2가지 Pre-rendering 외 - 2204 week3","categories":"WIL","author":"최중재(aziel)","emoji":"🏺"},"fields":{"slug":"/WIL/WIL-2022-04/WIL-2204-week3/"}},"prev":{"id":"25adbdc8-7e40-5495-9aa4-b2e1e70ab1e0","html":"<h2 id=\"에러메시지를-띄우기-위한-re-render-어떻게\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC%EB%A9%94%EC%8B%9C%EC%A7%80%EB%A5%BC-%EB%9D%84%EC%9A%B0%EA%B8%B0-%EC%9C%84%ED%95%9C-re-render-%EC%96%B4%EB%96%BB%EA%B2%8C\" aria-label=\"에러메시지를 띄우기 위한 re render 어떻게 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러메시지를 띄우기 위한 re-render 어떻게?</h2>\n<h3 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h3>\n<p>스파르타 공모전에 참여하여 되었다. 지금은 <code class=\"language-text\">로그인 페이지</code>를 만들고 있다. 아직 서버로 요청하는 부분은 작업하지 않았고 custom hook을 만들어 이메일과 패스워드 정보에 대한 유효성검사를 하는 부분까지 작업하였다. 이메일 형식에 맞지 않는 값을 입력하거나 비밀번호를 공란으로 둔 채 로그인 버튼을 누르면 에러메시지가 나와야하는데, 이게 <code class=\"language-text\">re-render</code>를 할 경우 짜여진 코드에 의해서 에러메시지가 나올 텐데 어떻게 해야할 지 고민이 되었다. <a href=\"https://db2dev.tistory.com/entry/React-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EA%B0%95%EC%A0%9C-Re-render%ED%95%98%EA%B8%B0-re-render-%EC%9B%90%EB%A6%AC%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9D%B4%ED%95%B4\">더미 state를 만들어 그 state를 변화시키는 방식으로 re-render를 하는 글</a>을 보았으나 이는 좋지 않은 구조라고 글쓴이가 얘기를 해서 고민 끝에 아래와 같이 코드를 작성하여 해결하였다.</p>\n<h3 id=\"나의코드\" style=\"position:relative;\"><a href=\"#%EB%82%98%EC%9D%98%EC%BD%94%EB%93%9C\" aria-label=\"나의코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나의코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Link <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> useInput <span class=\"token keyword\">from</span> <span class=\"token string\">'../../hooks/use-input'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> classes <span class=\"token keyword\">from</span> <span class=\"token string\">'./Login.module.css'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isEmail</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isNotEmpty</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Login</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> emailValue<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">isValid</span><span class=\"token operator\">:</span> emailIsValid<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">hasError</span><span class=\"token operator\">:</span> emailHasError<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">valueChangeHandler</span><span class=\"token operator\">:</span> emailChangeHandler<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">inputBlurHandler</span><span class=\"token operator\">:</span> emailBlurHandler<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">reset</span><span class=\"token operator\">:</span> resetEmail<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useInput</span><span class=\"token punctuation\">(</span>isEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> pwValue<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">isValid</span><span class=\"token operator\">:</span> pwIsValid<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">hasError</span><span class=\"token operator\">:</span> pwHasError<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">valueChangeHandler</span><span class=\"token operator\">:</span> pwChangeHandler<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">inputBlurHandler</span><span class=\"token operator\">:</span> pwBlurHandler<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">reset</span><span class=\"token operator\">:</span> resetPw<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useInput</span><span class=\"token punctuation\">(</span>isNotEmpty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">submitHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>emailIsValid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">emailBlurHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pwIsValid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">pwBlurHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">resetEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">resetPw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>section<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>로고<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>submitHandler<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">'form-control'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>label htmlFor<span class=\"token operator\">=</span><span class=\"token string\">\"email\"</span><span class=\"token operator\">></span>Email<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>input\n            type<span class=\"token operator\">=</span><span class=\"token string\">\"email\"</span>\n            id<span class=\"token operator\">=</span><span class=\"token string\">\"email\"</span>\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>emailValue<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>emailChangeHandler<span class=\"token punctuation\">}</span>\n            onBlur<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>emailBlurHandler<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>emailHasError <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>p className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">'error-text'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>유효한 이메일을 입력해주세요<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">'form-control'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>label htmlFor<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span><span class=\"token operator\">></span>Password<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>input\n            type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span>\n            id<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span>\n            autoComplete<span class=\"token operator\">=</span><span class=\"token string\">\"off\"</span>\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>pwValue<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>pwChangeHandler<span class=\"token punctuation\">}</span>\n            onBlur<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>pwBlurHandler<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>pwHasError <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>p className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">'error-text'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>비밀번호를 입력해주세요<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">'button-wrapper'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">></span>Login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">'link-wrapper'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Link className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">'a-style'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> to<span class=\"token operator\">=</span><span class=\"token string\">\"/signup\"</span><span class=\"token operator\">></span>\n            RountineWave 가입하기\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>section<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Login<span class=\"token punctuation\">;</span></code></pre></div>\n<p>submitHandler함수는 로그인 버튼을 클릭 시 호출되는 함수인데, 이메일이나 비밀번호가 유효하지 않으면 blur가(입력 필드에 포커스아웃) 될 때 호출하는 함수를 콜하게 하였다. 이렇게 되면 함수 콜에 의해 reducer에 action과 특정 state의 변화가 이루어져 다시 <code class=\"language-text\">re-render</code>하게 된다. 그럼 현재 유효하지 않은 로그인 입력 필드에 에러메시지가 생긴다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%97%90%EB%9F%AC%EB%A9%94%EC%8B%9C%EC%A7%80%EB%A5%BC-%EB%9D%84%EC%9A%B0%EA%B8%B0-%EC%9C%84%ED%95%9C-re-render-%EC%96%B4%EB%96%BB%EA%B2%8C\">에러메시지를 띄우기 위한 re-render 어떻게?</a></p>\n<ul>\n<li><a href=\"#%EA%B0%9C%EC%9A%94\">개요</a></li>\n<li><a href=\"#%EB%82%98%EC%9D%98%EC%BD%94%EB%93%9C\">나의코드</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"May 05, 2022","title":"(TIL) React - 에러메시지를 띄우기 위한 re-render 어떻게?","categories":"TIL REACT","author":"최중재(aziel)","emoji":"🙃"},"fields":{"slug":"/TIL/TIL-2022-05/TIL-220505/"}},"site":{"siteMetadata":{"siteUrl":"https://joong8812.github.io","comments":{"utterances":{"repo":"joong8812/joong8812.github.io"}}}}},"pageContext":{"slug":"/TIL/TIL-2022-05/TIL-220503/","nextSlug":"/WIL/WIL-2022-04/WIL-2204-week3/","prevSlug":"/TIL/TIL-2022-05/TIL-220505/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}