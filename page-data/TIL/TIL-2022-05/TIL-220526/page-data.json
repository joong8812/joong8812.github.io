{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/TIL/TIL-2022-05/TIL-220526/",
    "result": {"data":{"cur":{"id":"cb8db078-5639-539e-ab01-23ab7d6735ac","html":"<h2 id=\"usecallback은-무엇인가\" style=\"position:relative;\"><a href=\"#usecallback%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"usecallback은 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useCallback은 무엇인가?</h2>\n<h3 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h3>\n<p>댓글 기능을 가진 Component예제 코드를 보다가 작성 된 내용을 요청하고 콜백함수로 <code class=\"language-text\">useCallback</code> hook으로 감싼 함수를 호출하는 부분을 보고, 저 hook은 무슨 역할을 하는 건지 궁금해졌다. <a href=\"https://reactjs.org/docs/hooks-reference.html#usecallback\">공식문서</a>를 먼저 살펴보았다.</p>\n<h3 id=\"정의\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%9D%98\" aria-label=\"정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정의</h3>\n<blockquote>\n<p>Returns a memoized callback.<br>\n대정의는 간단한다. memoized(저장되어진) callback(콜백함수를) return(리턴) 하는 것이다.\nPass an inline callback and an array of dependecies. <code class=\"language-text\">useCallback</code> will return a memoized version of the callback that only changes if one of the dependencies has changed. This is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders.\ndependencies 배열에 넣어준 값이 변화가 될 때에만 콜백함수가 재정의되고, 그렇지 않은 경우에는 저장되어진 콜백함수가 리턴이 되어질것이다 라고 얘기하고 있다.</p>\n</blockquote>\n<h3 id=\"이점\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A0%90\" aria-label=\"이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이점</h3>\n<p>React의 컴포넌트들은 여러 이유로 렌더링이 다시 되는 경우가 많다. 렌더링이 다시 발생할 때마다 작성된 함수도 다시 정의가 되어진다. 이 행위가 메모리, CPU 리소스를 많이 차지하는 작업은 아니라 그 자체만으로는 큰 부하가 생길일은 없지만, <code class=\"language-text\">props가 바뀌지 않았으면 Virtual DOM에 새로 렌더링 하지 않고 컴포넌트의 결과물을 재사용하는 최적화 작업</code>에 필수적인 기능이라고 합니다. (출처: <a href=\"https://react.vlpt.us/basic/18-useCallback.html\">벨로퍼트와 함께하는 모던 리액트</a>)</p>\n<h3 id=\"예제코드\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C%EC%BD%94%EB%93%9C\" aria-label=\"예제코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">const</span> addedCommentHandler <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sendRequest</span><span class=\"token punctuation\">(</span>quoteId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>sendRequest<span class=\"token punctuation\">,</span> quoteId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">{</span>isAddingComment <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NewCommentForm</span></span> <span class=\"token attr-name\">quoteId</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>quoteId<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onAddedComment</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>addedCommentHandler<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>예제코드를 보면 <code class=\"language-text\">NewCommentForm</code>하위 컴포넌트에서 댓글 작성 후 저장 요청을 하고 성공을 하면 <code class=\"language-text\">onAddedCommponent(부모:addedCommentHandler)</code>를 호출하여 해당 콜백함수가 재선언되지 않고 처음에 memoized된 콜백함수를 호출(실행) 하게 된다.</p>\n<h3 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h3>\n<p>아직 성능을 신경 쓸 정도의 React 프로젝트를 해보지 않아서 최적화, 성능 등을 고려해서 코드를 작성하지는 않는다. 그러나 규모가 커질수록 이런부분에서 사용자경험에 많은 영향을 미치리라 생각되기에 이런 Hook의 쓰임을 잘 알고 적절히 사용하면 좋을 것 같다.</p>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usecallback\">React 공식문서</a></li>\n<li><a href=\"https://react.vlpt.us/basic/18-useCallback.html\">벨로퍼트와 함께하는 모던 리액트 - 18. useCallback 을 사용하여 함수 재사용하기</a></li>\n<li><a href=\"https://www.daleseo.com/react-hooks-use-callback/\">React Hooks:useCallback 사용법</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#usecallback%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\">useCallback은 무엇인가?</a></p>\n<ul>\n<li><a href=\"#%EA%B0%9C%EC%9A%94\">개요</a></li>\n<li><a href=\"#%EC%A0%95%EC%9D%98\">정의</a></li>\n<li><a href=\"#%EC%9D%B4%EC%A0%90\">이점</a></li>\n<li><a href=\"#%EC%98%88%EC%A0%9C%EC%BD%94%EB%93%9C\">예제코드</a></li>\n<li><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"useCallback은 무엇인가? 개요 댓글 기능을 가진 Component예제 코드를 보다가 작성 된 내용을 요청하고 콜백함수로  hook으로 감싼 함수를 호출하는 부분을 보고, 저 hook은 무슨 역할을 하는 건지 궁금해졌다. 공식문서를 먼저 살펴보았다. 정의 Returns a memoized callback. 대정의는 간단한다. memoized(저장되어진) callback(콜백함수를) return(리턴) 하는 것이다.\nPass an inline callback and an array of dependecies.  will return a memoized version of the callback that only changes if one of the dependencies has changed. This is useful when passing callbacks to optimized child components that rely on reference equality to…","frontmatter":{"date":"May 26, 2022","title":"(TIL) React - useCallback은 무엇인가?","categories":"TIL REACT","author":"최중재(aziel)","emoji":"🥎"},"fields":{"slug":"/TIL/TIL-2022-05/TIL-220526/"}},"next":{"id":"f0e4937b-fd52-5bf9-8fec-6b68a523810b","html":"<h2 id=\"1-딥브레인ai-아카데미-수료-및-프로젝트-완료-\" style=\"position:relative;\"><a href=\"#1-%EB%94%A5%EB%B8%8C%EB%A0%88%EC%9D%B8ai-%EC%95%84%EC%B9%B4%EB%8D%B0%EB%AF%B8-%EC%88%98%EB%A3%8C-%EB%B0%8F-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%99%84%EB%A3%8C-\" aria-label=\"1 딥브레인ai 아카데미 수료 및 프로젝트 완료  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 딥브레인AI 아카데미 수료 및 프로젝트 완료 🥛</h2>\n<p>내배캠을 수료한 후 지난 5주간 딥브레인AI 아카데미에서 웹어플리케이션을 만들기 위한 여러 기술들을 배웠다. 매주 토요일에 풀타임(9:30-18:00)으로 진행되긴 했지만, 깊게 배우기에는 너무 짧은 시간이였다. <a href=\"https://github.com/brain-choihong/ai-museum-guide\">박물관 AI 가이드</a>는 <code class=\"language-text\">React</code>, <code class=\"language-text\">NextJS</code>와 딥브레인AI에서 제공한 <code class=\"language-text\">AI Studios API</code>를 활용한 프로젝트였다. 시간이 많지 않았기 때문에(같이하시는 분을 일하고 계시고, 나는 스파르타 공모전 프로젝트도 같이 진행했다) 완성도는 부족하지만 내게는 새로웠던 기술로 웹애플리케이션을 만들 수 있어서 재미있고, 뿌듯했다.</p>\n<h3 id=\"1-1-이번-프로젝트로-얻은-것\" style=\"position:relative;\"><a href=\"#1-1-%EC%9D%B4%EB%B2%88-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%A1%9C-%EC%96%BB%EC%9D%80-%EA%B2%83\" aria-label=\"1 1 이번 프로젝트로 얻은 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-1 이번 프로젝트로 얻은 것</h3>\n<ol>\n<li><code class=\"language-text\">NextJS</code> framework에서 웹애플리케이션 개발이 가능하다.</li>\n<li><code class=\"language-text\">React</code> 를 통해 컴포넌트를 만들고 화면 구성할 수 있다.</li>\n<li><code class=\"language-text\">Styled components</code>로 컴포넌트를 꾸밀 수 있다.</li>\n<li>비디오 제작 프로세스를 일정한 주기로 API 요청 및 확인하여 진행상황을 화면에 표시할 수 있다. (요청마다 프로세스 진행상황을 응답해주는 경우)</li>\n</ol>\n<h3 id=\"1-2-내가-작업한-부분-살펴보기\" style=\"position:relative;\"><a href=\"#1-2-%EB%82%B4%EA%B0%80-%EC%9E%91%EC%97%85%ED%95%9C-%EB%B6%80%EB%B6%84-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"1 2 내가 작업한 부분 살펴보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-2 내가 작업한 부분 살펴보기</h3>\n<ol>\n<li>소장품 리스트\n<img src=\"/995b81939023a8e974e3425f7ea28d05/collectible_list.gif\" alt=\"소장품리스트\">\n등록된 소장품들을 이미지와 함께 리스트업 하여 보여준다.</li>\n</ol>\n<hr>\n<ol start=\"2\">\n<li>소장품 등록 - AI 가이드 생성\n<img src=\"/bec76a79e8104dee08a53bba740c0764/collectible-create.gif\" alt=\"가이드생성\">\nAI Studios api를 통하여 AI가이드(영상)를 생성한다. 3~4차례 API서버로 요청 및 응답을 하여 완성한다. 생성 진행상황은 1초 간격으로 api서버로 요청하여 받은 프로세스 결과값을 표시한다.</li>\n</ol>\n<hr>\n<ol start=\"3\">\n<li>소장품 수정, 삭제\n<img src=\"/bf602c5b0143a28cf4303f114c95f013/collectible-modify-delete.gif\" alt=\"소장품수정삭제\">\n소장품을 수정, 삭제가 가능하도록 했다.</li>\n</ol>\n<hr>\n<h2 id=\"2-code-classlanguage-textai-박물관-가이드code-프로젝트-kpt-회고록-\" style=\"position:relative;\"><a href=\"#2-code-classlanguage-textai-%EB%B0%95%EB%AC%BC%EA%B4%80-%EA%B0%80%EC%9D%B4%EB%93%9Ccode-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-kpt-%ED%9A%8C%EA%B3%A0%EB%A1%9D-\" aria-label=\"2 code classlanguage textai 박물관 가이드code 프로젝트 kpt 회고록  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <code class=\"language-text\">AI 박물관 가이드</code> 프로젝트 KPT 회고록 🥜</h2>\n<ul>\n<li>K (Keep) 잘하고 있는점. 계속 했으면 좋겠다 싶은 점</li>\n<li>P (Problem) 뭔가 문제가 있다 싶은 점. 변화가 필요한 점</li>\n<li>T (Try) 잘하고 있는 것을 더 잘하기 위해서, 문제가 있는 점을 해결하기 위해서 우리가 시도해 볼 것들</li>\n</ul>\n<ul>\n<li>\n<p><strong>Keep</strong></p>\n<ul>\n<li>React, NextJS로 웹개발이 가능함을 알았고, 많은 회사의 프론트엔드 포지션에서 해당 기술을 사용하는 것 같아, 잘 다루도록 숙련도를 올려야겠다.</li>\n</ul>\n</li>\n<li>\n<p><strong>Problem</strong></p>\n<ul>\n<li>함께하는 분과 소통을 많이 못해 아쉽다.</li>\n<li>Git commit 메시지 컨벤션을 맞추지 못해 아쉽다.</li>\n<li>아카데미 과정에서 배운 Express 서버를 백엔드로 두지 못한 Serverless 프로젝트라 조금 아쉬웠다.</li>\n<li>로그인 인증 구현을 제대로 하지 못해 아쉽다.</li>\n</ul>\n</li>\n<li>\n<p><strong>Try</strong></p>\n<ul>\n<li>기능 정의와 화면 정의를 명확하게 하는 게 좋겠다. (짧고 작은 프로젝트라도..)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-총평-\" style=\"position:relative;\"><a href=\"#3-%EC%B4%9D%ED%8F%89-\" aria-label=\"3 총평  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 총평 🍪</h2>\n<ul>\n<li>내배캠에서는 온라인으로만 수업을하고 프로젝트를 진행했었는데, 이번 아카데미는 매주 대면으로 교육을 받고 같이 프로젝트하는 팀원이랑도 대면으로 소통할 수 있어서 좋았던 것 같다. 물론 시간적인 측면(외출준비, 통학)에서는 온라인이 더 강점이 있지만, 역시나 사람들과 직접 부딪히며 교육받고, 프로젝트에 대해 대화를 나누는 것도 필요한 것 같다. 이 기간 동안에 배운 것들은 맛보기라 생각하고 계속해서 관련 기술들을 디벨롭하여 한 사람몫을 하는 <code class=\"language-text\">웹 개발자</code>로 성장 해야겠다. 비즈니스를 성공적으로 만드는 개발자 일 뿐 아니라 지식을 공유하는 개발자로 가는 여정은 이제 시작했을 뿐이다. 화이팅.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1-%EB%94%A5%EB%B8%8C%EB%A0%88%EC%9D%B8ai-%EC%95%84%EC%B9%B4%EB%8D%B0%EB%AF%B8-%EC%88%98%EB%A3%8C-%EB%B0%8F-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%99%84%EB%A3%8C-\">1. 딥브레인AI 아카데미 수료 및 프로젝트 완료 🥛</a></p>\n<ul>\n<li><a href=\"#1-1-%EC%9D%B4%EB%B2%88-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%A1%9C-%EC%96%BB%EC%9D%80-%EA%B2%83\">1-1 이번 프로젝트로 얻은 것</a></li>\n<li><a href=\"#1-2-%EB%82%B4%EA%B0%80-%EC%9E%91%EC%97%85%ED%95%9C-%EB%B6%80%EB%B6%84-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\">1-2 내가 작업한 부분 살펴보기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-ai-%EB%B0%95%EB%AC%BC%EA%B4%80-%EA%B0%80%EC%9D%B4%EB%93%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-kpt-%ED%9A%8C%EA%B3%A0%EB%A1%9D-\">2. <code class=\"language-text\">AI 박물관 가이드</code> 프로젝트 KPT 회고록 🥜</a></p>\n</li>\n<li>\n<p><a href=\"#3-%EC%B4%9D%ED%8F%89-\">3. 총평 🍪</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"May 24, 2022","title":"DeepbrainAI 아카데미 프로젝트(AI 박물관 가이드) - KPT회고","categories":"KPT PROJECT","author":"최중재(aziel)","emoji":"👻"},"fields":{"slug":"/Project/deepbrain-project/"}},"prev":{"id":"0b4bf94f-66ad-5214-affe-b29d31f5c571","html":"<h2 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h2>\n<p>더 좋은 React 컴포넌트를 구조에 대해 리서치를 하다보니 <code class=\"language-text\">presentational-container패턴</code> 이라는 키워드를 자주 접하게 되었다. React의 아버지 <code class=\"language-text\">Dan Abramov</code>의 <a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\">글</a>을 보면서 어떤 패턴인지 확인 해보자.</p>\n<p><strong><em>참고: 2019년에 남긴 Dan Abramov에 의하면 그는 더이상 이 패턴을 강제로 사용하기를 추천하지 않는다고 한다. (컴포넌트를 이 패턴으로 나누지 않고 커스텀 훅을 이용해서도 가능하는 등에 다양한 패턴이 있을 수 있기에)</em></strong></p>\n<h2 id=\"왜-이러한-패턴을-정의했는가\" style=\"position:relative;\"><a href=\"#%EC%99%9C-%EC%9D%B4%EB%9F%AC%ED%95%9C-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%A0%95%EC%9D%98%ED%96%88%EB%8A%94%EA%B0%80\" aria-label=\"왜 이러한 패턴을 정의했는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 이러한 패턴을 정의했는가?</h2>\n<p>컴포넌트를 더 쉽게 재사용할 수 있기 때문이다.</p>\n<h2 id=\"살펴보자\" style=\"position:relative;\"><a href=\"#%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%9E%90\" aria-label=\"살펴보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>살펴보자</h2>\n<p>이 두 형태의 컴포넌트들을 명확히 구분하기 위해서 각 각 다른 폴더에 넣는다.</p>\n<h3 id=\"presentational-컴포넌트\" style=\"position:relative;\"><a href=\"#presentational-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"presentational 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>presentational</strong> 컴포넌트</h3>\n<ul>\n<li>어떻게 생겼는 지(표현)에 집중한다.</li>\n<li>presentational과 container 컴포넌트 둘 다 가질 수 있지만, 보통 DOM 마크업과 스타일을 가지고 있다.</li>\n<li>종종 <em>this.props.children</em> 을 통해 방지했던 것을 허용한다.</li>\n<li><em>Flux actions</em> 나 <em>store</em> 와 같은 다른 앱에 종속성이 없어야 한다.</li>\n<li>데이터를 불러오거나 변경하는 방법을 지정하지 않는다.</li>\n<li>데이터와 콜백을 <em>props</em> 를 통해서만 받는다.</li>\n<li>드물게 이 컴포넌트가 자체적으로 <em>state</em> 를 갖는다.(갖는다면, 데이터보다는 UI관련 state를 갖는다)</li>\n<li>state, 생명주기, hooks 또는 성능 최적화가 필요하지 않는다면 함수형 컴포넌트로 작성된다.</li>\n<li>예시: Page, Sidebar, Story, UserInfo, List</li>\n</ul>\n<h3 id=\"container-컴포넌트\" style=\"position:relative;\"><a href=\"#container-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"container 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>container</strong> 컴포넌트</h3>\n<ul>\n<li>어떻게 동작하는 지에 집중한다.</li>\n<li>presentational과 container 컴포넌트 둘 다 가질 수 있지만, 보통 감싸주는 div외에 DOM 마크업과 스타일을 가지고 있지 않다.</li>\n<li>presentatinal 컴포넌트와 다른 container 컴포넌트에 데이터와 행동을 제공한다.</li>\n<li>Flux action을 호출하고 이것을 presentational 컴포넌트에 콜백형태로 제공한다.</li>\n<li>데이터를 제공하는 stateful 한 형태이다.</li>\n<li>일반적으로 직접 작성하기보다 React Redux의 connect(), Relay의 createContainer(), Flux Utils의 Cotnainer.create() 와 같은 상위 컴포넌트르 사용하여 생성된다.</li>\n<li>예시: UserPage, FollowersSidebar, StoryContainer, FollowedUserList</li>\n</ul>\n<h2 id=\"이-패턴의-이점\" style=\"position:relative;\"><a href=\"#%EC%9D%B4-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%9D%B4%EC%A0%90\" aria-label=\"이 패턴의 이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이 패턴의 이점</h2>\n<ul>\n<li>더 나은 관심사 분리가 가능하다. 이 패턴으로 앱과 UI를 더 이해하기가 좋다.</li>\n<li>재사용성이 좋다. 동일한 presentational 컴포넌트를 완전히 다른 상태 소스와 함께 사용할 수 있으며, 이를 별도의 container 컴포넌트로 전환하여 재사용할 있다.</li>\n<li>Presentational 컴포넌트는 앱의 필수적인 “팔레트” 이다. 이러한 구성 요소를 한 페이지에 배치하면 디자이너가 앱의 로직을 건드리지 않고도 모든 변형을 조정할 수 있다. 해당 페이지에서 스크린샷 회귀 테스트를 실행할 수 있다.</li>\n<li>이렇게 하면 여러 container 컴포넌트에 동일한 마크업과 레이아웃을 복제하는 대신 Sidebar, Page, ContextMenu 와 같은 ‘layout component’를 추출하여 this.props.children를 사용해야 한다.</li>\n</ul>\n<p>기억하세요, 컴포넌트들은 DOM을 노출하지 않아도 됩니다. UI컴포넌트 사이에 구성요소 경계들만 제공하면 됩니다.</p>\n<h2 id=\"코드-예시\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C\" aria-label=\"코드 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 예시</h2>\n<h3 id=\"a-presentation-and-data-concern-두-관심사가-같이-있는-코드\" style=\"position:relative;\"><a href=\"#a-presentation-and-data-concern-%EB%91%90-%EA%B4%80%EC%8B%AC%EC%82%AC%EA%B0%80-%EA%B0%99%EC%9D%B4-%EC%9E%88%EB%8A%94-%EC%BD%94%EB%93%9C\" aria-label=\"a presentation and data concern 두 관심사가 같이 있는 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>a presentation</em> and <em>data concern</em> 두 관심사가 같이 있는 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// CommentList.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CommentList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">comments</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/my-comments.json'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">comments</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> comments <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>comments<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> body<span class=\"token punctuation\">,</span> author <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">{</span>body<span class=\"token punctuation\">}</span><span class=\"token operator\">-</span><span class=\"token punctuation\">{</span>author<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"두-관심사가-분리-된-코드\" style=\"position:relative;\"><a href=\"#%EB%91%90-%EA%B4%80%EC%8B%AC%EC%82%AC%EA%B0%80-%EB%B6%84%EB%A6%AC-%EB%90%9C-%EC%BD%94%EB%93%9C\" aria-label=\"두 관심사가 분리 된 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>두 관심사가 분리 된 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// CommentList.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Commentlist</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">comments</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>comments<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> body<span class=\"token punctuation\">,</span> author <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>body<span class=\"token punctuation\">}</span><span class=\"token operator\">-</span><span class=\"token punctuation\">{</span>author<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// CommentListContainer.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> CommentList <span class=\"token keyword\">from</span> <span class=\"token string\">'./CommentList'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CommentListContainer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">comments</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/my-comments.json'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">comments</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> comments <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>CommentList comments<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>comments<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"dan-abramov의-마지막-한마디\" style=\"position:relative;\"><a href=\"#dan-abramov%EC%9D%98-%EB%A7%88%EC%A7%80%EB%A7%89-%ED%95%9C%EB%A7%88%EB%94%94\" aria-label=\"dan abramov의 마지막 한마디 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dan Abramov의 마지막 한마디</h2>\n<p><strong><em>프레젠테이션과 컨테이너 구성 요소의 분리를 독단적으로 받아들이지 마세요. 때로는 구분이 중요하지 않거나 선을 긋기가 어려울 수도 있습니다. 특정 컴포넌트가 프레젠테이션용인지 컨테이너용인지 확신이 서지 않는다면 아직 결정하기에는 이르다고 생각할 수 있습니다. 걱정하지 마세요!</em></strong></p>\n<h2 id=\"나의-생각\" style=\"position:relative;\"><a href=\"#%EB%82%98%EC%9D%98-%EC%83%9D%EA%B0%81\" aria-label=\"나의 생각 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나의 생각</h2>\n<p><code class=\"language-text\">Dan Abramov</code>의 <a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\">글</a>을 다 읽어보니 이미 리액트 코드를 작성할 때 자연스럽게 하고 있던 패턴이였다. 다만 이 다른 관심사를 가지고 있는 두 컴포넌트를 <em>presentational</em> 혹은 <em>container</em> 라고 부르는 지 몰랐을 뿐이다. 이 글은 무려 8년전(2015년) 에 쓰여진 글이고 2019년에는 본인도 생각이 바뀌어 이 패턴을 사용해도 좋지만 무조건 강제하는 건 지양한다고 했다. 보이는 형태가 이렇게 컴포넌트로 쪼개지던 커스텀훅으로 관심사를 분리하던 혹은 다른형태로 하던 중요한 건 UI와 비즈니스 로직을 분리해서 관리하는 게 중요한 포인트 같다. 프로그래밍의 세계에 정답은 정말 없는 것 같다. 다양한 의견들이 공존하고 시행되고 있기 때문이다. 훗날 나도 생각이 바뀔수도 있지만 지금은 <code class=\"language-text\">팀플레이</code> 하기 좋고 <code class=\"language-text\">유지보수</code> 가 좋은 코드와 구조가 제일 좋다고 생각한다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EA%B0%9C%EC%9A%94\">개요</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%99%9C-%EC%9D%B4%EB%9F%AC%ED%95%9C-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%A0%95%EC%9D%98%ED%96%88%EB%8A%94%EA%B0%80\">왜 이러한 패턴을 정의했는가?</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%9E%90\">살펴보자</a></p>\n<ul>\n<li><a href=\"#presentational-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\"><strong>presentational</strong> 컴포넌트</a></li>\n<li><a href=\"#container-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\"><strong>container</strong> 컴포넌트</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9D%B4-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%9D%B4%EC%A0%90\">이 패턴의 이점</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C\">코드 예시</a></p>\n<ul>\n<li><a href=\"#a-presentation-and-data-concern-%EB%91%90-%EA%B4%80%EC%8B%AC%EC%82%AC%EA%B0%80-%EA%B0%99%EC%9D%B4-%EC%9E%88%EB%8A%94-%EC%BD%94%EB%93%9C\"><em>a presentation</em> and <em>data concern</em> 두 관심사가 같이 있는 코드</a></li>\n<li><a href=\"#%EB%91%90-%EA%B4%80%EC%8B%AC%EC%82%AC%EA%B0%80-%EB%B6%84%EB%A6%AC-%EB%90%9C-%EC%BD%94%EB%93%9C\">두 관심사가 분리 된 코드</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#dan-abramov%EC%9D%98-%EB%A7%88%EC%A7%80%EB%A7%89-%ED%95%9C%EB%A7%88%EB%94%94\">Dan Abramov의 마지막 한마디</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%82%98%EC%9D%98-%EC%83%9D%EA%B0%81\">나의 생각</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"March 12, 2023","title":"container-presentational 패턴","categories":"REACT","author":"최중재(aziel)","emoji":"👀"},"fields":{"slug":"/React/presentational-container-components/"}},"site":{"siteMetadata":{"siteUrl":"https://joong8812.github.io","comments":{"utterances":{"repo":"joong8812/joong8812.github.io"}}}}},"pageContext":{"slug":"/TIL/TIL-2022-05/TIL-220526/","nextSlug":"/Project/deepbrain-project/","prevSlug":"/React/presentational-container-components/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}