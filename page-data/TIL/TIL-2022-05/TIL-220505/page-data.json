{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/TIL/TIL-2022-05/TIL-220505/",
    "result": {"data":{"cur":{"id":"25adbdc8-7e40-5495-9aa4-b2e1e70ab1e0","html":"<h2 id=\"에러메시지를-띄우기-위한-re-render-어떻게\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC%EB%A9%94%EC%8B%9C%EC%A7%80%EB%A5%BC-%EB%9D%84%EC%9A%B0%EA%B8%B0-%EC%9C%84%ED%95%9C-re-render-%EC%96%B4%EB%96%BB%EA%B2%8C\" aria-label=\"에러메시지를 띄우기 위한 re render 어떻게 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러메시지를 띄우기 위한 re-render 어떻게?</h2>\n<h3 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h3>\n<p>스파르타 공모전에 참여하여 되었다. 지금은 <code class=\"language-text\">로그인 페이지</code>를 만들고 있다. 아직 서버로 요청하는 부분은 작업하지 않았고 custom hook을 만들어 이메일과 패스워드 정보에 대한 유효성검사를 하는 부분까지 작업하였다. 이메일 형식에 맞지 않는 값을 입력하거나 비밀번호를 공란으로 둔 채 로그인 버튼을 누르면 에러메시지가 나와야하는데, 이게 <code class=\"language-text\">re-render</code>를 할 경우 짜여진 코드에 의해서 에러메시지가 나올 텐데 어떻게 해야할 지 고민이 되었다. <a href=\"https://db2dev.tistory.com/entry/React-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EA%B0%95%EC%A0%9C-Re-render%ED%95%98%EA%B8%B0-re-render-%EC%9B%90%EB%A6%AC%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9D%B4%ED%95%B4\">더미 state를 만들어 그 state를 변화시키는 방식으로 re-render를 하는 글</a>을 보았으나 이는 좋지 않은 구조라고 글쓴이가 얘기를 해서 고민 끝에 아래와 같이 코드를 작성하여 해결하였다.</p>\n<h3 id=\"나의코드\" style=\"position:relative;\"><a href=\"#%EB%82%98%EC%9D%98%EC%BD%94%EB%93%9C\" aria-label=\"나의코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나의코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Link <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> useInput <span class=\"token keyword\">from</span> <span class=\"token string\">'../../hooks/use-input'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> classes <span class=\"token keyword\">from</span> <span class=\"token string\">'./Login.module.css'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isEmail</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isNotEmpty</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Login</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> emailValue<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">isValid</span><span class=\"token operator\">:</span> emailIsValid<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">hasError</span><span class=\"token operator\">:</span> emailHasError<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">valueChangeHandler</span><span class=\"token operator\">:</span> emailChangeHandler<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">inputBlurHandler</span><span class=\"token operator\">:</span> emailBlurHandler<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">reset</span><span class=\"token operator\">:</span> resetEmail<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useInput</span><span class=\"token punctuation\">(</span>isEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> pwValue<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">isValid</span><span class=\"token operator\">:</span> pwIsValid<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">hasError</span><span class=\"token operator\">:</span> pwHasError<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">valueChangeHandler</span><span class=\"token operator\">:</span> pwChangeHandler<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">inputBlurHandler</span><span class=\"token operator\">:</span> pwBlurHandler<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">reset</span><span class=\"token operator\">:</span> resetPw<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useInput</span><span class=\"token punctuation\">(</span>isNotEmpty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">submitHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>emailIsValid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">emailBlurHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pwIsValid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">pwBlurHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">resetEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">resetPw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>section<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>로고<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>submitHandler<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">'form-control'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>label htmlFor<span class=\"token operator\">=</span><span class=\"token string\">\"email\"</span><span class=\"token operator\">></span>Email<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>input\n            type<span class=\"token operator\">=</span><span class=\"token string\">\"email\"</span>\n            id<span class=\"token operator\">=</span><span class=\"token string\">\"email\"</span>\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>emailValue<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>emailChangeHandler<span class=\"token punctuation\">}</span>\n            onBlur<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>emailBlurHandler<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>emailHasError <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>p className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">'error-text'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>유효한 이메일을 입력해주세요<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">'form-control'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>label htmlFor<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span><span class=\"token operator\">></span>Password<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>input\n            type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span>\n            id<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span>\n            autoComplete<span class=\"token operator\">=</span><span class=\"token string\">\"off\"</span>\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>pwValue<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>pwChangeHandler<span class=\"token punctuation\">}</span>\n            onBlur<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>pwBlurHandler<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>pwHasError <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>p className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">'error-text'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>비밀번호를 입력해주세요<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">'button-wrapper'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">></span>Login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">'link-wrapper'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Link className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">'a-style'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> to<span class=\"token operator\">=</span><span class=\"token string\">\"/signup\"</span><span class=\"token operator\">></span>\n            RountineWave 가입하기\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>section<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Login<span class=\"token punctuation\">;</span></code></pre></div>\n<p>submitHandler함수는 로그인 버튼을 클릭 시 호출되는 함수인데, 이메일이나 비밀번호가 유효하지 않으면 blur가(입력 필드에 포커스아웃) 될 때 호출하는 함수를 콜하게 하였다. 이렇게 되면 함수 콜에 의해 reducer에 action과 특정 state의 변화가 이루어져 다시 <code class=\"language-text\">re-render</code>하게 된다. 그럼 현재 유효하지 않은 로그인 입력 필드에 에러메시지가 생긴다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%97%90%EB%9F%AC%EB%A9%94%EC%8B%9C%EC%A7%80%EB%A5%BC-%EB%9D%84%EC%9A%B0%EA%B8%B0-%EC%9C%84%ED%95%9C-re-render-%EC%96%B4%EB%96%BB%EA%B2%8C\">에러메시지를 띄우기 위한 re-render 어떻게?</a></p>\n<ul>\n<li><a href=\"#%EA%B0%9C%EC%9A%94\">개요</a></li>\n<li><a href=\"#%EB%82%98%EC%9D%98%EC%BD%94%EB%93%9C\">나의코드</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"에러메시지를 띄우기 위한 re-render 어떻게? 개요 스파르타 공모전에 참여하여 되었다. 지금은 를 만들고 있다. 아직 서버로 요청하는 부분은 작업하지 않았고 custom hook을 만들어 이메일과 패스워드 정보에 대한 유효성검사를 하는 부분까지 작업하였다. 이메일 형식에 맞지 않는 값을 입력하거나 비밀번호를 공란으로 둔 채 로그인 버튼을 누르면 에러메시지가 나와야하는데, 이게 를 할 경우 짜여진 코드에 의해서 에러메시지가 나올 텐데 어떻게 해야할 지 고민이 되었다. 더미 state를 만들어 그 state를 변화시키는 방식으로 re-render를 하는 글을 보았으나 이는 좋지 않은 구조라고 글쓴이가 얘기를 해서 고민 끝에 아래와 같이 코드를 작성하여 해결하였다. 나의코드 submitHandler함수는 로그인 버튼을 클릭 시 호출되는 함수인데, 이메일이나 비밀번호가 유효하지 않으면 blur가(입력 필드에 포커스아웃) 될 때 호출하는 함수를 콜하게 하였다. 이렇게 되면 함수 콜에 …","frontmatter":{"date":"May 05, 2022","title":"(TIL) React - 에러메시지를 띄우기 위한 re-render 어떻게?","categories":"TIL REACT","author":"최중재(aziel)","emoji":"🙃"},"fields":{"slug":"/TIL/TIL-2022-05/TIL-220505/"}},"next":{"id":"9e16d511-2f8d-53ed-96a2-981cbb0699e1","html":"<h2 id=\"오늘-공부한-react-예제-코드-살펴보기\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%8A%98-%EA%B3%B5%EB%B6%80%ED%95%9C-react-%EC%98%88%EC%A0%9C-%EC%BD%94%EB%93%9C-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"오늘 공부한 react 예제 코드 살펴보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오늘 공부한 React 예제 코드 살펴보기</h2>\n<h3 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h3>\n<p>React(리액트) 할 줄 아는 프론트엔드 개발자가 되고 싶어 요즘 Udemy에서 <a href=\"https://www.udemy.com/course/react-the-complete-guide-incl-redux/\">React - The Complete Guide (incl Hooks, React Router, Redux)</a> 강의를 듣고 있다. 오늘 들은 <code class=\"language-text\">Custom Hooks</code> 관련 강의 중에 나온 App.js 예제 코드를 살펴보자. (설명은 주석으로)</p>\n<h3 id=\"예제코드\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C%EC%BD%94%EB%93%9C\" aria-label=\"예제코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> Tasks <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Tasks/Tasks'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> NewTask <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/NewTask/NewTask'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isLoading<span class=\"token punctuation\">,</span> setIsLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Loading 상태를 나타내는 boolean state</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">,</span> setError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error 값을 갖는 state</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tasks<span class=\"token punctuation\">,</span> setTasks<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 일정(업무) 배열 값을 갖는 state</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchTasks</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">taskText</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 위에 초기값을 설정해줬지만 다시 렌더링할 때를 고려하여 초기화 해줌</span>\n    <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>\n        <span class=\"token comment\">// firebase에서 데이터 가져올 때 async-await를 사용하여 비동기처리가 되지 않도록 한다</span>\n        <span class=\"token string\">'https://react-prac-a1700-default-rtdb.asia-southeast1.firebasedatabase.app/tasks.json'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 응답을 못 받으면 에러를 던져 다음 코드를 실행하지 않도록 한다</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Request failed!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 응답의 json값을 data 변수에 넣는다</span>\n\n      <span class=\"token keyword\">const</span> loadedTasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 일정들을 담을 배열 선언</span>\n\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> taskKey <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 응답 받은 데이터들을 loadedTasks 배열에 담는다</span>\n        loadedTasks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> taskKey<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> data<span class=\"token punctuation\">[</span>taskKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>loadedTasks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// tasks state의 위에 담은 배열을 넣어준다</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message <span class=\"token operator\">||</span> <span class=\"token string\">'Something went wrong!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 에러 발생시 error state의 문자열값을 담는다</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 로딩 state false로 변경</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 함수 fetchTasks 호출한다. dependency가 빈 배열이기 때문에 렌더시 useEffect 안이 한번 만 실행된다</span>\n    <span class=\"token function\">fetchTasks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 아래 함수 호출 시 매개변수로 받은 일정(task)을 기존 tasks(배열) state에 추가한다</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">taskAddHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevTasks</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> prevTasks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 아래는 JSX, 컴포넌트들을 배치한다</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>NewTask onAddTask<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>taskAddHandler<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Tasks items<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>tasks<span class=\"token punctuation\">}</span> loading<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>isLoading<span class=\"token punctuation\">}</span> error<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>error<span class=\"token punctuation\">}</span> onFetch<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>fetchTasks<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"새로-배운-것\" style=\"position:relative;\"><a href=\"#%EC%83%88%EB%A1%9C-%EB%B0%B0%EC%9A%B4-%EA%B2%83\" aria-label=\"새로 배운 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>새로 배운 것</h3>\n<ul>\n<li>자바스크립트에 fetch를 이용하여 api서버에서 데이터를 가져올 수 있다.</li>\n<li>firebase를 통하여 아주 간단하게 api서버를 만든다(무료)</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%98%A4%EB%8A%98-%EA%B3%B5%EB%B6%80%ED%95%9C-react-%EC%98%88%EC%A0%9C-%EC%BD%94%EB%93%9C-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\">오늘 공부한 React 예제 코드 살펴보기</a></p>\n<ul>\n<li><a href=\"#%EA%B0%9C%EC%9A%94\">개요</a></li>\n<li><a href=\"#%EC%98%88%EC%A0%9C%EC%BD%94%EB%93%9C\">예제코드</a></li>\n<li><a href=\"#%EC%83%88%EB%A1%9C-%EB%B0%B0%EC%9A%B4-%EA%B2%83\">새로 배운 것</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"May 03, 2022","title":"(TIL) React - 예제 App.js 코드 살펴보기","categories":"TIL REACT","author":"최중재(aziel)","emoji":"🌷"},"fields":{"slug":"/TIL/TIL-2022-05/TIL-220503/"}},"prev":{"id":"f0e4937b-fd52-5bf9-8fec-6b68a523810b","html":"<h2 id=\"1-딥브레인ai-아카데미-수료-및-프로젝트-완료-\" style=\"position:relative;\"><a href=\"#1-%EB%94%A5%EB%B8%8C%EB%A0%88%EC%9D%B8ai-%EC%95%84%EC%B9%B4%EB%8D%B0%EB%AF%B8-%EC%88%98%EB%A3%8C-%EB%B0%8F-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%99%84%EB%A3%8C-\" aria-label=\"1 딥브레인ai 아카데미 수료 및 프로젝트 완료  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 딥브레인AI 아카데미 수료 및 프로젝트 완료 🥛</h2>\n<p>내배캠을 수료한 후 지난 5주간 딥브레인AI 아카데미에서 웹어플리케이션을 만들기 위한 여러 기술들을 배웠다. 매주 토요일에 풀타임(9:30-18:00)으로 진행되긴 했지만, 깊게 배우기에는 너무 짧은 시간이였다. <a href=\"https://github.com/brain-choihong/ai-museum-guide\">박물관 AI 가이드</a>는 <code class=\"language-text\">React</code>, <code class=\"language-text\">NextJS</code>와 딥브레인AI에서 제공한 <code class=\"language-text\">AI Studios API</code>를 활용한 프로젝트였다. 시간이 많지 않았기 때문에(같이하시는 분을 일하고 계시고, 나는 스파르타 공모전 프로젝트도 같이 진행했다) 완성도는 부족하지만 내게는 새로웠던 기술로 웹애플리케이션을 만들 수 있어서 재미있고, 뿌듯했다.</p>\n<h3 id=\"1-1-이번-프로젝트로-얻은-것\" style=\"position:relative;\"><a href=\"#1-1-%EC%9D%B4%EB%B2%88-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%A1%9C-%EC%96%BB%EC%9D%80-%EA%B2%83\" aria-label=\"1 1 이번 프로젝트로 얻은 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-1 이번 프로젝트로 얻은 것</h3>\n<ol>\n<li><code class=\"language-text\">NextJS</code> framework에서 웹애플리케이션 개발이 가능하다.</li>\n<li><code class=\"language-text\">React</code> 를 통해 컴포넌트를 만들고 화면 구성할 수 있다.</li>\n<li><code class=\"language-text\">Styled components</code>로 컴포넌트를 꾸밀 수 있다.</li>\n<li>비디오 제작 프로세스를 일정한 주기로 API 요청 및 확인하여 진행상황을 화면에 표시할 수 있다. (요청마다 프로세스 진행상황을 응답해주는 경우)</li>\n</ol>\n<h3 id=\"1-2-내가-작업한-부분-살펴보기\" style=\"position:relative;\"><a href=\"#1-2-%EB%82%B4%EA%B0%80-%EC%9E%91%EC%97%85%ED%95%9C-%EB%B6%80%EB%B6%84-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"1 2 내가 작업한 부분 살펴보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-2 내가 작업한 부분 살펴보기</h3>\n<ol>\n<li>소장품 리스트\n<img src=\"/995b81939023a8e974e3425f7ea28d05/collectible_list.gif\" alt=\"소장품리스트\">\n등록된 소장품들을 이미지와 함께 리스트업 하여 보여준다.</li>\n</ol>\n<hr>\n<ol start=\"2\">\n<li>소장품 등록 - AI 가이드 생성\n<img src=\"/bec76a79e8104dee08a53bba740c0764/collectible-create.gif\" alt=\"가이드생성\">\nAI Studios api를 통하여 AI가이드(영상)를 생성한다. 3~4차례 API서버로 요청 및 응답을 하여 완성한다. 생성 진행상황은 1초 간격으로 api서버로 요청하여 받은 프로세스 결과값을 표시한다.</li>\n</ol>\n<hr>\n<ol start=\"3\">\n<li>소장품 수정, 삭제\n<img src=\"/bf602c5b0143a28cf4303f114c95f013/collectible-modify-delete.gif\" alt=\"소장품수정삭제\">\n소장품을 수정, 삭제가 가능하도록 했다.</li>\n</ol>\n<hr>\n<h2 id=\"2-code-classlanguage-textai-박물관-가이드code-프로젝트-kpt-회고록-\" style=\"position:relative;\"><a href=\"#2-code-classlanguage-textai-%EB%B0%95%EB%AC%BC%EA%B4%80-%EA%B0%80%EC%9D%B4%EB%93%9Ccode-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-kpt-%ED%9A%8C%EA%B3%A0%EB%A1%9D-\" aria-label=\"2 code classlanguage textai 박물관 가이드code 프로젝트 kpt 회고록  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <code class=\"language-text\">AI 박물관 가이드</code> 프로젝트 KPT 회고록 🥜</h2>\n<ul>\n<li>K (Keep) 잘하고 있는점. 계속 했으면 좋겠다 싶은 점</li>\n<li>P (Problem) 뭔가 문제가 있다 싶은 점. 변화가 필요한 점</li>\n<li>T (Try) 잘하고 있는 것을 더 잘하기 위해서, 문제가 있는 점을 해결하기 위해서 우리가 시도해 볼 것들</li>\n</ul>\n<ul>\n<li>\n<p><strong>Keep</strong></p>\n<ul>\n<li>React, NextJS로 웹개발이 가능함을 알았고, 많은 회사의 프론트엔드 포지션에서 해당 기술을 사용하는 것 같아, 잘 다루도록 숙련도를 올려야겠다.</li>\n</ul>\n</li>\n<li>\n<p><strong>Problem</strong></p>\n<ul>\n<li>함께하는 분과 소통을 많이 못해 아쉽다.</li>\n<li>Git commit 메시지 컨벤션을 맞추지 못해 아쉽다.</li>\n<li>아카데미 과정에서 배운 Express 서버를 백엔드로 두지 못한 Serverless 프로젝트라 조금 아쉬웠다.</li>\n<li>로그인 인증 구현을 제대로 하지 못해 아쉽다.</li>\n</ul>\n</li>\n<li>\n<p><strong>Try</strong></p>\n<ul>\n<li>기능 정의와 화면 정의를 명확하게 하는 게 좋겠다. (짧고 작은 프로젝트라도..)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-총평-\" style=\"position:relative;\"><a href=\"#3-%EC%B4%9D%ED%8F%89-\" aria-label=\"3 총평  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 총평 🍪</h2>\n<ul>\n<li>내배캠에서는 온라인으로만 수업을하고 프로젝트를 진행했었는데, 이번 아카데미는 매주 대면으로 교육을 받고 같이 프로젝트하는 팀원이랑도 대면으로 소통할 수 있어서 좋았던 것 같다. 물론 시간적인 측면(외출준비, 통학)에서는 온라인이 더 강점이 있지만, 역시나 사람들과 직접 부딪히며 교육받고, 프로젝트에 대해 대화를 나누는 것도 필요한 것 같다. 이 기간 동안에 배운 것들은 맛보기라 생각하고 계속해서 관련 기술들을 디벨롭하여 한 사람몫을 하는 <code class=\"language-text\">웹 개발자</code>로 성장 해야겠다. 비즈니스를 성공적으로 만드는 개발자 일 뿐 아니라 지식을 공유하는 개발자로 가는 여정은 이제 시작했을 뿐이다. 화이팅.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1-%EB%94%A5%EB%B8%8C%EB%A0%88%EC%9D%B8ai-%EC%95%84%EC%B9%B4%EB%8D%B0%EB%AF%B8-%EC%88%98%EB%A3%8C-%EB%B0%8F-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%99%84%EB%A3%8C-\">1. 딥브레인AI 아카데미 수료 및 프로젝트 완료 🥛</a></p>\n<ul>\n<li><a href=\"#1-1-%EC%9D%B4%EB%B2%88-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%A1%9C-%EC%96%BB%EC%9D%80-%EA%B2%83\">1-1 이번 프로젝트로 얻은 것</a></li>\n<li><a href=\"#1-2-%EB%82%B4%EA%B0%80-%EC%9E%91%EC%97%85%ED%95%9C-%EB%B6%80%EB%B6%84-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\">1-2 내가 작업한 부분 살펴보기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-ai-%EB%B0%95%EB%AC%BC%EA%B4%80-%EA%B0%80%EC%9D%B4%EB%93%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-kpt-%ED%9A%8C%EA%B3%A0%EB%A1%9D-\">2. <code class=\"language-text\">AI 박물관 가이드</code> 프로젝트 KPT 회고록 🥜</a></p>\n</li>\n<li>\n<p><a href=\"#3-%EC%B4%9D%ED%8F%89-\">3. 총평 🍪</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"May 24, 2022","title":"DeepbrainAI 아카데미 프로젝트(AI 박물관 가이드) - KPT회고","categories":"KPT PROJECT","author":"최중재(aziel)","emoji":"👻"},"fields":{"slug":"/Project/deepbrain-project/"}},"site":{"siteMetadata":{"siteUrl":"https://joong8812.github.io","comments":{"utterances":{"repo":"joong8812/joong8812.github.io"}}}}},"pageContext":{"slug":"/TIL/TIL-2022-05/TIL-220505/","nextSlug":"/TIL/TIL-2022-05/TIL-220503/","prevSlug":"/Project/deepbrain-project/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}