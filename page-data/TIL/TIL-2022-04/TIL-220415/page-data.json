{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/TIL/TIL-2022-04/TIL-220415/",
    "result": {"data":{"cur":{"id":"11b4f22c-26e9-5693-baf9-915c20d43215","html":"<h2 id=\"오잉-상태변화-할-때-값을-복사하고-한다\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EC%9E%89-%EC%83%81%ED%83%9C%EB%B3%80%ED%99%94-%ED%95%A0-%EB%95%8C-%EA%B0%92%EC%9D%84-%EB%B3%B5%EC%82%AC%ED%95%98%EA%B3%A0-%ED%95%9C%EB%8B%A4\" aria-label=\"오잉 상태변화 할 때 값을 복사하고 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오잉? 상태변화 할 때 값을 복사하고 한다?</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> squares <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>squares<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    squares<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'X'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>squares<span class=\"token operator\">:</span> squares<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 <code class=\"language-text\">squares</code>라는 배열의 state를 변경할 때 직접 해당 배열의 값을 변경하는 것이 아니라 <code class=\"language-text\">slice</code>를 사용하여 배열을 복사하고, 값을 변경하고, state 변화를 해준다. 직접 객체변경 혹은 데이터 변경이 이루어져도 결과는 같지만 이 immutability(불변성)이 가진 장점이 강력하기 때문에 React에서도 권장한다.</p>\n<h2 id=\"immutability-장점\" style=\"position:relative;\"><a href=\"#immutability-%EC%9E%A5%EC%A0%90\" aria-label=\"immutability 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>immutability 장점</h2>\n<h3 id=\"1-복잡한-특징을-단순하게\" style=\"position:relative;\"><a href=\"#1-%EB%B3%B5%EC%9E%A1%ED%95%9C-%ED%8A%B9%EC%A7%95%EC%9D%84-%EB%8B%A8%EC%88%9C%ED%95%98%EA%B2%8C\" aria-label=\"1 복잡한 특징을 단순하게 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 복잡한 특징을 단순하게</h3>\n<p><code class=\"language-text\">특정 행동을 취소하고 다시 실행하는 기능</code>을 위에 과정을 통해 쉽게 할 수 있다. 이전 데이터를 재사용하기 용이하다</p>\n<h3 id=\"2-변화-감지\" style=\"position:relative;\"><a href=\"#2-%EB%B3%80%ED%99%94-%EA%B0%90%EC%A7%80\" aria-label=\"2 변화 감지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 변화 감지</h3>\n<p>객체가 직접 수정이 이루어지면 변화 감지를 위해서 이전 사본과 전체 객체 트리를 돌며 비교해야 한다. 반면 immutable 객체는 이전 객체와 다르면 변화 했다고 빠르게 판단할 수 있다.</p>\n<h3 id=\"3-리렌더링-시기-결정\" style=\"position:relative;\"><a href=\"#3-%EB%A6%AC%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%8B%9C%EA%B8%B0-%EA%B2%B0%EC%A0%95\" aria-label=\"3 리렌더링 시기 결정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 리렌더링 시기 결정</h3>\n<p>React에서 <code class=\"language-text\">순수 컴포넌트</code>를 만드는데 도움을 주고, 성능을 최적화 할 수 있다. 직접적으로 값을 변경하면 매번 state변화와 함께 가상DOM에서 리렌더링이 발생하기 때문에 CPU에 미세한 낭비가 발생한다(규모가 커질수록 성능에 지대한 영향을 미칠수도 있다). 반면 immutable 객체를 활용하면 변화를 쉽게 감지하고 렌더링을 다시할 경우만 정의(shouldComponentUpdate 사용)하여 효율적으로 리렌더링을 할 수 있다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://ko.reactjs.org/tutorial/tutorial.html#why-immutability-is-important\">React documentation - 불변성이 왜 중요할까요?</a></li>\n<li><a href=\"https://ko.reactjs.org/docs/optimizing-performance.html#examples\">React documentation - 성능 최적화</a></li>\n<li><a href=\"https://velopert.com/3486\">React ❤️ Immutable.js – 리액트의 불변함, 그리고 컴포넌트에서 Immutable.js 사용하기</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%98%A4%EC%9E%89-%EC%83%81%ED%83%9C%EB%B3%80%ED%99%94-%ED%95%A0-%EB%95%8C-%EA%B0%92%EC%9D%84-%EB%B3%B5%EC%82%AC%ED%95%98%EA%B3%A0-%ED%95%9C%EB%8B%A4\">오잉? 상태변화 할 때 값을 복사하고 한다?</a></p>\n</li>\n<li>\n<p><a href=\"#immutability-%EC%9E%A5%EC%A0%90\">immutability 장점</a></p>\n<ul>\n<li><a href=\"#1-%EB%B3%B5%EC%9E%A1%ED%95%9C-%ED%8A%B9%EC%A7%95%EC%9D%84-%EB%8B%A8%EC%88%9C%ED%95%98%EA%B2%8C\">1. 복잡한 특징을 단순하게</a></li>\n<li><a href=\"#2-%EB%B3%80%ED%99%94-%EA%B0%90%EC%A7%80\">2. 변화 감지</a></li>\n<li><a href=\"#3-%EB%A6%AC%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%8B%9C%EA%B8%B0-%EA%B2%B0%EC%A0%95\">3. 리렌더링 시기 결정</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></p>\n</li>\n</ul>\n</div>","excerpt":"오잉? 상태변화 할 때 값을 복사하고 한다? 위와 같이 라는 배열의 state를 변경할 때 직접 해당 배열의 값을 변경하는 것이 아니라 를 사용하여 배열을 복사하고, 값을 변경하고, state 변화를 해준다. 직접 객체변경 혹은 데이터 변경이 이루어져도 결과는 같지만 이 immutability(불변성)이 가진 장점이 강력하기 때문에 React에서도 권장한다. immutability 장점 1. 복잡한 특징을 단순하게 을 위에 과정을 통해 쉽게 할 수 있다. 이전 데이터를 재사용하기 용이하다 2. 변화 감지 객체가 직접 수정이 이루어지면 변화 감지를 위해서 이전 사본과 전체 객체 트리를 돌며 비교해야 한다. 반면 immutable 객체는 이전 객체와 다르면 변화 했다고 빠르게 판단할 수 있다. 3. 리렌더링 시기 결정 React에서 를 만드는데 도움을 주고, 성능을 최적화 할 수 있다. 직접적으로 값을 변경하면 매번 state변화와 함께 가상DOM에서 리렌더링이 발생하기 때문에 CPU…","frontmatter":{"date":"April 15, 2022","title":"React immutability(불변성) 장점","categories":"TIL REACT","author":"코딩쿠니","emoji":"🔭"},"fields":{"slug":"/TIL/TIL-2022-04/TIL-220415/"}},"next":{"id":"3c1abc5a-f3fd-54b2-9bca-f37dff711278","html":"<h2 id=\"면접을-준비하다\" style=\"position:relative;\"><a href=\"#%EB%A9%B4%EC%A0%91%EC%9D%84-%EC%A4%80%EB%B9%84%ED%95%98%EB%8B%A4\" aria-label=\"면접을 준비하다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>면접을 준비하다</h2>\n<p>지금까지 진행한 프로젝트를 중심으로 어제까지 이력서를 완성했다. 나는 최대한 텍스트가 많이 담기지 않지만 어떤 기술을 사용했고 경험했는 지 담도록 했다. 그런데 인터넷에 공유되어 있는 선배 개발자들의 이력서와 비교하면 내 것은 너무 초라하다고 생각이 되어졌다. 웹 개발자로써 앞으로 많은 것들을 자신있게 이력서에 담을 수 있도록 끊임없이 노력해야겠다. 이력서를 토대로 오늘 모의 면접을 보았다. 모의 면접관님이 편안하게 분위기를 이끌어주셔서 떨지 않고 질문에 내가 가진 경험과 지식을 잘 대답했다. 전반적으로 괜찮다는 평을 받았다. 이력서에서 기술의 순서나 불필요한 내용은 안 넣어도 된다고도 하셨다. 사실 많은 준비를 한 채 진행했던 것은 아니라 어떤 느낌인지를 확인하는 자리가 맞을 것 같다. 앞으로 실전에서 더 좋은 지원자가 되려면 갈 길이 멀었다. 노력하자!</p>\n<h2 id=\"수료생-특강\" style=\"position:relative;\"><a href=\"#%EC%88%98%EB%A3%8C%EC%83%9D-%ED%8A%B9%EA%B0%95\" aria-label=\"수료생 특강 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수료생 특강</h2>\n<p>다른 스파르타 내배캠 수료생이 이 과정이 끝난 후 해야 할 일이라 하면서 본인이 취업을 위해서 어떻게 했는데 생생한 경험담과 팁을 주셨다. 그 중 기억에 남았던 것이 <code class=\"language-text\">지원을 많이해서 면접기회를 많이 잡아라</code> 였다. 연봉만이 회사를 결정하는 가장 중요한 항목이라 말할 순 없지만, 연사님은 계속 지원하고 면접을 볼 수록 연봉이 올라갔다고 하셨다. 또 수료 후 사이드프로젝트를 많이 하기보다는 1~2개를 계속 리팩토링하면서 좋은 코드를 남기는 것이 취업에서 유리하다고 하신 것도 기억에 남았다. 노션으로 이력서 작성한 걸 보여주셨는데, 깔끔하게 잘 하신 것 같았다. 여러 곳에 합격도 하고 좋은 곳에서 일을 하는 건 다 그 만한 준비를 했기 때문이라고 생각이 되어졌다. 나도 열심히 한다하는데 더 뛰어난 사람들이 있다. 하하. 그래도 계속 해보자. 나와 코드가 맞는, 서로를 원하는 그런 일터가 반드시 있을 것이다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%A9%B4%EC%A0%91%EC%9D%84-%EC%A4%80%EB%B9%84%ED%95%98%EB%8B%A4\">면접을 준비하다</a></li>\n<li><a href=\"#%EC%88%98%EB%A3%8C%EC%83%9D-%ED%8A%B9%EA%B0%95\">수료생 특강</a></li>\n</ul>\n</div>","frontmatter":{"date":"April 14, 2022","title":"스파르타 내배캠 모의면접 & 수료생 특강 - 정리&생각","categories":"TIL","author":"코딩쿠니","emoji":"🪪"},"fields":{"slug":"/TIL/TIL-2022-04/TIL-220414/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://joong8812.github.io","comments":{"utterances":{"repo":"joong8812/joong8812.github.io"}}}}},"pageContext":{"slug":"/TIL/TIL-2022-04/TIL-220415/","nextSlug":"/TIL/TIL-2022-04/TIL-220414/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}