{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/TIL/TIL-2022-04/TIL-220403/",
    "result": {"data":{"cur":{"id":"2fb30930-7816-56e6-83d3-0d2fa6d86639","html":"<h2 id=\"docker-container-끼리-연결\" style=\"position:relative;\"><a href=\"#docker-container-%EB%81%BC%EB%A6%AC-%EC%97%B0%EA%B2%B0\" aria-label=\"docker container 끼리 연결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker Container 끼리 연결</h2>\n<p>Docker의 각 컨테이너는 서로 다른 FileSystem과 Network를 가진다. 그렇기 때문에 따로 설정을 해주지 않으면 컨테이너 끼리 통신이 불가능하다. 그러면 어떤 방법으로 Docker container끼리 통신이 가능할까? mongoDB와 FlaskApp 두 컨테이너를 연결 해보자.</p>\n<h3 id=\"1-docker-network를-생성\" style=\"position:relative;\"><a href=\"#1-docker-network%EB%A5%BC-%EC%83%9D%EC%84%B1\" aria-label=\"1 docker network를 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Docker network를 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">docker network create memo</code></pre></div>\n<p>memo 라는 이름으로 docker network를 생성해주었다.</p>\n<h3 id=\"2-mongodb-컨테이너를-네트워크-memo와-연결\" style=\"position:relative;\"><a href=\"#2-mongodb-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EB%A5%BC-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-memo%EC%99%80-%EC%97%B0%EA%B2%B0\" aria-label=\"2 mongodb 컨테이너를 네트워크 memo와 연결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. MongoDB 컨테이너를 네트워크 memo와 연결</h3>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">docker run -d -p 27017:27017 --network memo --network-alias mongo mongo</code></pre></div>\n<ul>\n<li><code class=\"language-text\">-p 27017:27017</code> 로 내 컴퓨터의 27017포트를 mongo 컨테이너의 27017와 연결</li>\n<li><code class=\"language-text\">--network memo</code> memo라는 이름의 네트워크 와 연결</li>\n<li><code class=\"language-text\">--network-alias mongo</code> mongo라는 이름으로 mongo컨테이너를 가리키는 network 이름</li>\n</ul>\n<h3 id=\"3-flask-앱-내에-db-link를-변경\" style=\"position:relative;\"><a href=\"#3-flask-%EC%95%B1-%EB%82%B4%EC%97%90-db-link%EB%A5%BC-%EB%B3%80%EA%B2%BD\" aria-label=\"3 flask 앱 내에 db link를 변경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Flask 앱 내에 DB link를 변경</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">client <span class=\"token operator\">=</span> MongoClient<span class=\"token punctuation\">(</span><span class=\"token string\">'mongo'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27017</span><span class=\"token punctuation\">)</span> </code></pre></div>\n<p>MongoDB를 가리키는 연결정보를 2번 항목에서 alias해준 mongo로 변경</p>\n<h3 id=\"4-docker-flask-네트워크-memo와-연결\" style=\"position:relative;\"><a href=\"#4-docker-flask-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-memo%EC%99%80-%EC%97%B0%EA%B2%B0\" aria-label=\"4 docker flask 네트워크 memo와 연결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Docker Flask 네트워크 memo와 연결</h3>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">docker run -p 80:5000 --network memo simple-memo-app</code></pre></div>\n<p>그렇다. 중간에 <code class=\"language-text\">--network memo</code> 옵션을 추가하여 해당 컨테이너도 memo network와 연결 해주자.</p>\n<h3 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h3>\n<p>위와 같은 과정을 거치면 서로 다른 두 도커 컨테이너를 같은 네트워크에 두어 통신이 가능하게 할 수 있다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#docker-container-%EB%81%BC%EB%A6%AC-%EC%97%B0%EA%B2%B0\">Docker Container 끼리 연결</a></p>\n<ul>\n<li><a href=\"#1-docker-network%EB%A5%BC-%EC%83%9D%EC%84%B1\">1. Docker network를 생성</a></li>\n<li><a href=\"#2-mongodb-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EB%A5%BC-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-memo%EC%99%80-%EC%97%B0%EA%B2%B0\">2. MongoDB 컨테이너를 네트워크 memo와 연결</a></li>\n<li><a href=\"#3-flask-%EC%95%B1-%EB%82%B4%EC%97%90-db-link%EB%A5%BC-%EB%B3%80%EA%B2%BD\">3. Flask 앱 내에 DB link를 변경</a></li>\n<li><a href=\"#4-docker-flask-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-memo%EC%99%80-%EC%97%B0%EA%B2%B0\">4. Docker Flask 네트워크 memo와 연결</a></li>\n<li><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"Docker Container 끼리 연결 Docker의 각 컨테이너는 서로 다른 FileSystem과 Network를 가진다. 그렇기 때문에 따로 설정을 해주지 않으면 컨테이너 끼리 통신이 불가능하다. 그러면 어떤 방법으로 Docker container끼리 통신이 가능할까? mongoDB와 FlaskApp 두 컨테이너를 연결 해보자. 1. Docker network를 생성 memo 라는 이름으로 docker network를 생성해주었다. 2. MongoDB 컨테이너를 네트워크 memo와 연결  로 내 컴퓨터의 27017포트를 mongo 컨테이너의 27017와 연결  memo라는 이름의 네트워크 와 연결  mongo라는 이름으로 mongo컨테이너를 가리키는 network 이름 3. Flask 앱 내에 DB link를 변경 MongoDB를 가리키는 연결정보를 2번 항목에서 alias해준 mongo로 변경 4. Docker Flask 네트워크 memo와 연결 그렇다. 중간에  옵션을 추…","frontmatter":{"date":"April 03, 2022","title":"Docker Network 사용해보자!","categories":"TIL DOCKER","author":"코딩쿠니","emoji":"🦬"},"fields":{"slug":"/TIL/TIL-2022-04/TIL-220403/"}},"next":{"id":"1a74fc99-226c-5413-9932-d6259cbb44c0","html":"<h2 id=\"the-four-fs-facts-feelings-fidings-futures\" style=\"position:relative;\"><a href=\"#the-four-fs-facts-feelings-fidings-futures\" aria-label=\"the four fs facts feelings fidings futures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The four F’s (Facts, Feelings, Fidings, Futures)</h2>\n<h3 id=\"자동-배포\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%8F%99-%EB%B0%B0%ED%8F%AC\" aria-label=\"자동 배포 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자동 배포</h3>\n<p>지난 주에 어느 정도 개발을 마치고 어플리케이션 서버와 인공지능 서버를 AWS EB에 올려 배포를 했었다. 그리고 AWS CodePipeline을 통해 Github에 변경사항이 생기면 자동적으로 어플리케이션 서버에도 반영되도록 CI/CD 또한 구성을 하려 했었다. 그런데 AWS 시크릿키 등 감추어야 할 정보를 Github에 올릴 수 없어 실행에 옮기지 못했다. 서비스를 하기 위해선 이 과정이 꼭 필요하겠다 싶었다. (이것이 무중단 배포?) 튜터님께도 여쭙고 정보를 찾은 결과 숨기고 싶은 값들을 환경변수 값으로 넣고 불러오면 가능하다 생각했다. <code class=\"language-text\">django-dotenv</code> 패키지를 통해 로컬에서는 .env 파일에서 값을 가져오고 EB에서는 환경변수 알맞은 키와밸류만 넣어주면 동일하게 그 값들을 읽을 수 있다는 것을 알고 적용했다. 그리하여 deploy브랜치에 변경사항이 반영되면 자동으로 연결된 eb서버에도 적용되었다. 해결@@</p>\n<h3 id=\"중간-발표\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EA%B0%84-%EB%B0%9C%ED%91%9C\" aria-label=\"중간 발표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중간 발표</h3>\n<p>너무 아쉽게 <code class=\"language-text\">좋아요</code> 기능이 시연 때 잘 안되었지만 (아니 테스트 때 잘 되었는데, 갑자기 왜 이상하게 동작한거죠..) 기한에 맞춰 홍보만 빼고 필수 포함 사항을 다 잘 구현한 것 같다. 무언가 서비스를 하기에는 부족하다는 생각이 많이 들지만, 그래도 튜터님들에게 S.A 패스 받았던 프로젝트를 계획대로 잘 완성해서 뿌듯했다. 스파르타에서 처음으로 발표를 해보았는데, 입술이 바짝 말라 말하기가 점점 힘들정도로 긴장을 했다(난 무대체질이 아닌가보다 ㅠ). 주어진 시간보다는 더 쓴 것 같지만 팀원들이 고생해서 만든 기능들을 하나하나 얘기하여 전달하였다. 아직 최종발표가 남아있지만 남은 기간도 팀원들과 잘 협업하여 유종의미를 거두고 싶다.</p>\n<h3 id=\"코드리뷰\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EB%A6%AC%EB%B7%B0\" aria-label=\"코드리뷰 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드리뷰</h3>\n<p>코드리뷰라는 것은 모두 함께 모여서 함께 코드를 보고 피드백을 줘야한다고 생각했었다. 그런데 꼭 그렇게 같은 시간 속에서 모두가 함께 하지 않아도 Github에서 충분히 할 수 있다는 것을 튜터님을 통해 알았다. PR 보낸 각 코드 단락별로 의견도 남기도 답변도 하고 승인 및 작업 재요청도 할 수 있다. 코드를 바로 작업 브랜치에 병합하는 게 시간이 걸리긴 하지만 다른 사람의 코드도 더 자세하게 보게 되고(리뷰를 해야하니까) 나도 피드백을 받아볼 수 있어서 굉장히 좋고, 재미있다는 것을 느꼈다. 나의 제안대로 앞으로는 코드리뷰를 하면서 작업한 것을 반영하기로 했다. 더 성장하는 개발자가 되자!!</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#the-four-fs-facts-feelings-fidings-futures\">The four F’s (Facts, Feelings, Fidings, Futures)</a></p>\n<ul>\n<li><a href=\"#%EC%9E%90%EB%8F%99-%EB%B0%B0%ED%8F%AC\">자동 배포</a></li>\n<li><a href=\"#%EC%A4%91%EA%B0%84-%EB%B0%9C%ED%91%9C\">중간 발표</a></li>\n<li><a href=\"#%EC%BD%94%EB%93%9C%EB%A6%AC%EB%B7%B0\">코드리뷰</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"April 02, 2022","title":"Week I Learned - 2203-week5","categories":"WIL","author":"코딩쿠니","emoji":"🐠"},"fields":{"slug":"/WIL/WIL-2022-03/WIL-2203-week5/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://joong8812.github.io","comments":{"utterances":{"repo":"joong8812/joong8812.github.io"}}}}},"pageContext":{"slug":"/TIL/TIL-2022-04/TIL-220403/","nextSlug":"/WIL/WIL-2022-03/WIL-2203-week5/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}