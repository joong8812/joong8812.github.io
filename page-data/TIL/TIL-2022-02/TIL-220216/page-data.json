{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/TIL/TIL-2022-02/TIL-220216/",
    "result": {"data":{"cur":{"id":"53a8b212-2c07-5478-b124-b83cbdbb08a8","html":"<h2 id=\"django-서로-다른-유저에게-좋아요-카운트를-동시에-받게-된다면\" style=\"position:relative;\"><a href=\"#django-%EC%84%9C%EB%A1%9C-%EB%8B%A4%EB%A5%B8-%EC%9C%A0%EC%A0%80%EC%97%90%EA%B2%8C-%EC%A2%8B%EC%95%84%EC%9A%94-%EC%B9%B4%EC%9A%B4%ED%8A%B8%EB%A5%BC-%EB%8F%99%EC%8B%9C%EC%97%90-%EB%B0%9B%EA%B2%8C-%EB%90%9C%EB%8B%A4%EB%A9%B4\" aria-label=\"django 서로 다른 유저에게 좋아요 카운트를 동시에 받게 된다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[Django] 서로 다른 유저에게 좋아요 카운트를 동시에 받게 된다면?</h2>\n<p><code class=\"language-text\">좋아요</code> 버튼을 누를 때 마다 현재 DB에 들어 있는 게시글의 좋아요 수를 불러 온 후 1을 추가하고 다시 저장한다 라고 서비스로직을 만들었다고 해보자. 이 경우, 동시에 서로 다른 유저가 <code class=\"language-text\">좋아요</code>를 누르게 되면 좋아요 카운트가 올바르게 업데이트 되지 않을 수 있다. A가 <code class=\"language-text\">좋아요</code> 카운트를 증가 후 저장하기 전에 B가 <code class=\"language-text\">좋아요</code>를 요청할 경우다. Django의  F() expressions를 사용하면 이를 해결할 수 있다. 해당 표현을 사용하게 되면 실제 데이터를 메모리에 올려 놓은 후 수정하는 것이 아니라 바로 수정할 수 있게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ptyhon\"><pre class=\"language-ptyhon\"><code class=\"language-ptyhon\"># 1. 기존\narticle.like_count += 1 \n\n# 2. F 표현 사용\narticle.like_count = F(&quot;like_count&quot;) + 1</code></pre></div>\n<p>와 같이 코드를 작성하여 동시에 같은 컬럼의 값을 수정하게 되는 것을 순차적으로 하도록 하게 한다.</p>\n<ul>\n<li>관련 문서\n<ul>\n<li><a href=\"https://docs.djangoproject.com/en/4.0/ref/models/expressions/#f-expressions\">https://docs.djangoproject.com/en/4.0/ref/models/expressions/#f-expressions</a></li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#django-%EC%84%9C%EB%A1%9C-%EB%8B%A4%EB%A5%B8-%EC%9C%A0%EC%A0%80%EC%97%90%EA%B2%8C-%EC%A2%8B%EC%95%84%EC%9A%94-%EC%B9%B4%EC%9A%B4%ED%8A%B8%EB%A5%BC-%EB%8F%99%EC%8B%9C%EC%97%90-%EB%B0%9B%EA%B2%8C-%EB%90%9C%EB%8B%A4%EB%A9%B4\">[Django] 서로 다른 유저에게 좋아요 카운트를 동시에 받게 된다면?</a></li>\n</ul>\n</div>","excerpt":"[Django] 서로 다른 유저에게 좋아요 카운트를 동시에 받게 된다면?  버튼을 누를 때 마다 현재 DB에 들어 있는 게시글의 좋아요 수를 불러 온 후 1을 추가하고 다시 저장한다 라고 서비스로직을 만들었다고 해보자. 이 경우, 동시에 서로 다른 유저가 를 누르게 되면 좋아요 카운트가 올바르게 업데이트 되지 않을 수 있다. A가  카운트를 증가 후 저장하기 전에 B가 를 요청할 경우다. Django의  F() expressions를 사용하면 이를 해결할 수 있다. 해당 표현을 사용하게 되면 실제 데이터를 메모리에 올려 놓은 후 수정하는 것이 아니라 바로 수정할 수 있게 된다. 와 같이 코드를 작성하여 동시에 같은 컬럼의 값을 수정하게 되는 것을 순차적으로 하도록 하게 한다. 관련 문서 https://docs.djangoproject.com/en/4.0/ref/models/expressions/#f-expressions [Django] 서로 다른 유저에게 좋아요 카운트를 동시에 받…","frontmatter":{"date":"February 16, 2022","title":"좋아요 동시성 처리 - Django, F() expressions","categories":"TIL DJANGO","author":"코딩쿠니","emoji":"🐡"},"fields":{"slug":"/TIL/TIL-2022-02/TIL-220216/"}},"next":{"id":"1fb5aa20-eb32-50f9-8644-f7273e76de7d","html":"<h2 id=\"코드리뷰\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EB%A6%AC%EB%B7%B0\" aria-label=\"코드리뷰 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드리뷰</h2>\n<p>지난 주에 마친 프로젝트에 대해서 각 자 작성한 코드를 리뷰하는 시간을 가졌다. 어떤 라이브러리를 이용하고, 기능을 구현하기 위해서 어떻게 코드를 작성했는 지 설명을 하기도 하고, 팀원들의 얘기를 듣기도 했다. 우리의 코드를 돌아보고 서로 어떻게 구현했는 지 직간접을 알게 돼서 유익하고 재미있었다. 다만 아쉬운 건 내가 사용한 라이브러리에 대한 이해가 조금 부족해 잘 알려주지 못한 것 같아 아쉽다. 계속 드는 생각이지만, 내가 A부터 Z까지 작성해서 구현하는 것도 중요하지만 이미 잘 되어있는 것을 잘 알고 구현하는 것도 매우 중요한 것 같다. 한 번 보면 딱 알게되는 <code class=\"language-text\">천재</code>이면 얼마나 좋을까 라는 생각을 해봤다. 쓸데 없는 소리 하지 말고 열심히 하자!</p>\n<h2 id=\"django-폴더-구조\" style=\"position:relative;\"><a href=\"#django-%ED%8F%B4%EB%8D%94-%EA%B5%AC%EC%A1%B0\" aria-label=\"django 폴더 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django 폴더 구조</h2>\n<p>이전까지는 기본적인 장고 폴더 구조에서 개발을 했는데, 이번 심화 수업을 들으면서 더 쪼개서 할 수 있게 됨을 알게 되었다. 우선 테스트를 위한 <code class=\"language-text\">tests</code> 폴더, 비즈니스 로직을 담당하는 <code class=\"language-text\">services</code> 폴더, router(view)를 담당하는 <code class=\"language-text\">apis</code> 폴더로 나눠서 개발하는 것을 배우고 있다. 더 나아가 Django Ninja Swagger로 REST api를 테스트도 하고… 정말 여러가지 좋은 것들을 배우는 것 같다. 잘 배워서 실전에 써 보도록 하자.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%BD%94%EB%93%9C%EB%A6%AC%EB%B7%B0\">코드리뷰</a></li>\n<li><a href=\"#django-%ED%8F%B4%EB%8D%94-%EA%B5%AC%EC%A1%B0\">Django 폴더 구조</a></li>\n</ul>\n</div>","frontmatter":{"date":"February 15, 2022","title":"(TIL) 코드리뷰, Django 폴더구조 - 생각","categories":"TIL","author":"코딩쿠니","emoji":"🦖"},"fields":{"slug":"/TIL/TIL-2022-02/TIL-220215/"}},"prev":{"id":"62487267-5f71-5e79-a7f8-4205feff72e4","html":"<h2 id=\"파이썬-generator의-우아함\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC-generator%EC%9D%98-%EC%9A%B0%EC%95%84%ED%95%A8\" aria-label=\"파이썬 generator의 우아함 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이썬 Generator의 우아함</h2>\n<p>함수 안에 local 변수들은 그 해당 함수가 호출이 되고 종료가 되면 그 값들이 다 사라지게 된다. 그러나 우리는 가끔 함수 내용을 거치고도 그 값을 계속 유지하고 싶을 때가 있다. 그래서 함수 밖에 변수를 선언하여 그 값을 유지하기도 한다. 이 방법은 그 함수를 호출하는 쪽에서 변수를 관리해야 한다.<br>\n아래 행운권 추첨 예제가 있는데, 0을 뽑으면 꽝이다. 그런데 2번 연속 꽝이면 그 이후에는 무조건 0이 아닌 값을 뽑게 만드는 행운권 추첨이다. 가장 최근에 뽑은 숫자를 관리하기 위해서 <code class=\"language-text\">last_numbers</code>변수로 함수 호출 밖에서 관리를 해주고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n<span class=\"token keyword\">import</span> random\n\nNUMBERS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\nNUMBERS_WITHOUT_ZERO <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">lucky_draw</span><span class=\"token punctuation\">(</span>last_numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    picked <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>NUMBERS<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> picked <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> last_numbers<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        picked <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>NUMBERS_WITHOUT_ZERO<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 3연속 0 금지!</span>\n    last_numbers<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>picked<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> picked\n\n<span class=\"token comment\"># client - lucky_draw()를 호출하는 코드 </span>\nlast_numbers <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span>maxlen<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    picked <span class=\"token operator\">=</span> lucky_draw<span class=\"token punctuation\">(</span>last_numbers<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>picked<span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<p>조금 더 우아한 방법으로 Generator를 사용해보도록 하자. 이 방법을 쓰게 되면 함수 실행을 잠시 멈추었다가(함수 안 변수들의 값이 그대로 유지) 다시 실행 할 수 있게 된다. 아래 코드를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n<span class=\"token keyword\">import</span> random\n\nNUMBERS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\nNUMBERS_WITHOUT_ZERO <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">lucky_draw_gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    last_numbers <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span>maxlen<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        picked <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>NUMBERS<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> picked <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> last_numbers<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            picked <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>NUMBERS_WITHOUT_ZERO<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 3연속 0 금지!</span>\n        last_numbers<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>picked<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> picked\n\n<span class=\"token comment\"># client </span>\n<span class=\"token keyword\">for</span> draw <span class=\"token keyword\">in</span> luck_draw_gen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>draw<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">yield</code>가 한 번이라도 함수 안에서 사용되면 generator 함수라고 할 수 있다. generator의 <code class=\"language-text\">__next__()</code> 함수를 실행하면 함수 본문이 실행 되고 <code class=\"language-text\">yield</code>를 만나면 일시정지가 된다. 위 코드는 for문을 통해서 luck_draw_gen의 <code class=\"language-text\">__next__()</code> 함수를 실행시켜 함수가 실행되고 내부 <code class=\"language-text\">yield</code>로 인해 잠시 중지 하고 뽑은 숫자를 print하는 코드이다. 이렇게 되면 <code class=\"language-text\">last_numbers</code> 변수를 처음에 봤던 코드와 달리 함수 밖에서 관리해 줄 필요가 없어진다.</p>\n<h3 id=\"공식문서\" style=\"position:relative;\"><a href=\"#%EA%B3%B5%EC%8B%9D%EB%AC%B8%EC%84%9C\" aria-label=\"공식문서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>공식문서</h3>\n<p>pep 255 simple generator: <a href=\"https://www.python.org/dev/peps/pep-0255/\">https://www.python.org/dev/peps/pep-0255/</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC-generator%EC%9D%98-%EC%9A%B0%EC%95%84%ED%95%A8\">파이썬 Generator의 우아함</a></p>\n<ul>\n<li><a href=\"#%EA%B3%B5%EC%8B%9D%EB%AC%B8%EC%84%9C\">공식문서</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"February 17, 2022","title":"Python Generator","categories":"TIL PYTHON","author":"코딩쿠니","emoji":"🐳"},"fields":{"slug":"/TIL/TIL-2022-02/TIL-220217/"}},"site":{"siteMetadata":{"siteUrl":"https://joong8812.github.io","comments":{"utterances":{"repo":"joong8812/joong8812.github.io"}}}}},"pageContext":{"slug":"/TIL/TIL-2022-02/TIL-220216/","nextSlug":"/TIL/TIL-2022-02/TIL-220215/","prevSlug":"/TIL/TIL-2022-02/TIL-220217/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}