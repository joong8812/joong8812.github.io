{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/TIL/TIL-2022-02/TIL-220218/",
    "result": {"data":{"cur":{"id":"62039e51-8d18-5c22-b6e6-468438c86dbf","html":"<h2 id=\"1-render와-redirect의-차이\" style=\"position:relative;\"><a href=\"#1-render%EC%99%80-redirect%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"1 render와 redirect의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Render와 Redirect의 차이</h2>\n<p>Django view에서 return을 할 때 render로 하거나 redirect 로 합니다. 이 둘의 차이가 무엇일까요?</p>\n<ul>\n<li>\n<p>render</p>\n<ul>\n<li><code class=\"language-text\">return render(requeset, 'user/signup.html')</code></li>\n<li>render는 위와 같이 templates에 있는 html을 보여줄 때 입니다. 이 때, <strong>url은 변경되지 않습니다.</strong></li>\n</ul>\n</li>\n<li>\n<p>redirect</p>\n<ul>\n<li><code class=\"language-text\">return redirect('index')</code></li>\n<li>redirect는 우리가 정해놓은 url로 리다이렉트 시킵니다. 이 때, <strong>url이 변경 됩니다.</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-login_required\" style=\"position:relative;\"><a href=\"#2-login_required\" aria-label=\"2 login_required permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. @login_required</h2>\n<p>Django view에서 함수 위에 <code class=\"language-text\">@login_required</code>를 적어주면 <code class=\"language-text\">로그인이 된 유저</code>에게만 요청을 받아 view의 함수를 타게 할 수가 있습니다. 그렇다면 <code class=\"language-text\">로그인 되지 않은 유저</code>에게 요청을 받았을 때는 어떻게 응답을 해주면 좋을까요? 설정된 url로 리다이렉트 해줄 수가 있습니다. (로그인 페이지나 랜딩 페이지로 보내면 좋을 것 같습니다) 방법은 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>decorators <span class=\"token keyword\">import</span> login_required\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render<span class=\"token punctuation\">,</span> redirect\n\n<span class=\"token decorator annotation punctuation\">@login_required</span><span class=\"token punctuation\">(</span>login_url<span class=\"token operator\">=</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">'b/c.html'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>@login_required 데코레이터 뒤에 <code class=\"language-text\">login_url</code>로 로그인 되지 않은 유저를 리다이렉트 시킬 수 있습니다.</p>\n<ul>\n<li>참고\n<ul>\n<li><a href=\"https://docs.djangoproject.com/en/4.0/topics/auth/default/#the-login-required-decorator\">https://docs.djangoproject.com/en/4.0/topics/auth/default/#the-login-required-decorator</a></li>\n</ul>\n</li>\n</ul>","excerpt":"1. Render와 Redirect의 차이 Django view에서 return을 할 때 render로 하거나 redirect 로 합니다. 이 둘의 차이가 무엇일까요? render  render는 위와 같이 templates에 있는 html을 보여줄 때 입니다. 이 때, url은 변경되지 않습니다. redirect  redirect는 우리가 정해놓은 url로 리다이렉트 시킵니다. 이 때, url이 변경 됩니다. 2. @login_required Django view에서 함수 위에 를 적어주면 에게만 요청을 받아 view의 함수를 타게 할 수가 있습니다. 그렇다면 에게 요청을 받았을 때는 어떻게 응답을 해주면 좋을까요? 설정된 url로 리다이렉트 해줄 수가 있습니다. (로그인 페이지나 랜딩 페이지로 보내면 좋을 것 같습니다) 방법은 아래와 같습니다. @login_required 데코레이터 뒤에 로 로그인 되지 않은 유저를 리다이렉트 시킬 수 있습니다. 참고 https://docs.d…","frontmatter":{"date":"February 18, 2022","title":"오늘 알게 된 Django 미세정보 - Render, Redirect, @login_required","categories":"TIL DJANGO","author":"최중재(aziel)","emoji":"🦀"},"fields":{"slug":"/TIL/TIL-2022-02/TIL-220218/"}},"next":{"id":"b1e90776-1aa6-5903-8e07-8a0a373b4823","html":"<h2 id=\"파이썬-generator의-우아함\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC-generator%EC%9D%98-%EC%9A%B0%EC%95%84%ED%95%A8\" aria-label=\"파이썬 generator의 우아함 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이썬 Generator의 우아함</h2>\n<p>함수 안에 local 변수들은 그 해당 함수가 호출이 되고 종료가 되면 그 값들이 다 사라지게 된다. 그러나 우리는 가끔 함수 내용을 거치고도 그 값을 계속 유지하고 싶을 때가 있다. 그래서 함수 밖에 변수를 선언하여 그 값을 유지하기도 한다. 이 방법은 그 함수를 호출하는 쪽에서 변수를 관리해야 한다.<br>\n아래 행운권 추첨 예제가 있는데, 0을 뽑으면 꽝이다. 그런데 2번 연속 꽝이면 그 이후에는 무조건 0이 아닌 값을 뽑게 만드는 행운권 추첨이다. 가장 최근에 뽑은 숫자를 관리하기 위해서 <code class=\"language-text\">last_numbers</code>변수로 함수 호출 밖에서 관리를 해주고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n<span class=\"token keyword\">import</span> random\n\nNUMBERS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\nNUMBERS_WITHOUT_ZERO <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">lucky_draw</span><span class=\"token punctuation\">(</span>last_numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    picked <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>NUMBERS<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> picked <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> last_numbers<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        picked <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>NUMBERS_WITHOUT_ZERO<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 3연속 0 금지!</span>\n    last_numbers<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>picked<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> picked\n\n<span class=\"token comment\"># client - lucky_draw()를 호출하는 코드</span>\nlast_numbers <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span>maxlen<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    picked <span class=\"token operator\">=</span> lucky_draw<span class=\"token punctuation\">(</span>last_numbers<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>picked<span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<p>조금 더 우아한 방법으로 Generator를 사용해보도록 하자. 이 방법을 쓰게 되면 함수 실행을 잠시 멈추었다가(함수 안 변수들의 값이 그대로 유지) 다시 실행 할 수 있게 된다. 아래 코드를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n<span class=\"token keyword\">import</span> random\n\nNUMBERS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\nNUMBERS_WITHOUT_ZERO <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">lucky_draw_gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    last_numbers <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span>maxlen<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        picked <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>NUMBERS<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> picked <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> last_numbers<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            picked <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>NUMBERS_WITHOUT_ZERO<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 3연속 0 금지!</span>\n        last_numbers<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>picked<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> picked\n\n<span class=\"token comment\"># client</span>\n<span class=\"token keyword\">for</span> draw <span class=\"token keyword\">in</span> luck_draw_gen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>draw<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">yield</code>가 한 번이라도 함수 안에서 사용되면 generator 함수라고 할 수 있다. generator의 <code class=\"language-text\">__next__()</code> 함수를 실행하면 함수 본문이 실행 되고 <code class=\"language-text\">yield</code>를 만나면 일시정지가 된다. 위 코드는 for문을 통해서 luck_draw_gen의 <code class=\"language-text\">__next__()</code> 함수를 실행시켜 함수가 실행되고 내부 <code class=\"language-text\">yield</code>로 인해 잠시 중지 하고 뽑은 숫자를 print하는 코드이다. 이렇게 되면 <code class=\"language-text\">last_numbers</code> 변수를 처음에 봤던 코드와 달리 함수 밖에서 관리해 줄 필요가 없어진다.</p>\n<h3 id=\"공식문서\" style=\"position:relative;\"><a href=\"#%EA%B3%B5%EC%8B%9D%EB%AC%B8%EC%84%9C\" aria-label=\"공식문서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>공식문서</h3>\n<p>pep 255 simple generator: <a href=\"https://www.python.org/dev/peps/pep-0255/\">https://www.python.org/dev/peps/pep-0255/</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC-generator%EC%9D%98-%EC%9A%B0%EC%95%84%ED%95%A8\">파이썬 Generator의 우아함</a></p>\n<ul>\n<li><a href=\"#%EA%B3%B5%EC%8B%9D%EB%AC%B8%EC%84%9C\">공식문서</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"February 17, 2022","title":"Python Generator","categories":"TIL PYTHON","author":"최중재(aziel)","emoji":"🐳"},"fields":{"slug":"/TIL/TIL-2022-02/TIL-220217/"}},"prev":{"id":"1d473e57-5896-5ac0-b26e-90a687273c76","html":"<h2 id=\"the-four-fs-facts-feelings-fidings-futures\" style=\"position:relative;\"><a href=\"#the-four-fs-facts-feelings-fidings-futures\" aria-label=\"the four fs facts feelings fidings futures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The four F’s (Facts, Feelings, Fidings, Futures)</h2>\n<h3 id=\"학습-시간이-늘었다-그런데-고민도-\" style=\"position:relative;\"><a href=\"#%ED%95%99%EC%8A%B5-%EC%8B%9C%EA%B0%84%EC%9D%B4-%EB%8A%98%EC%97%88%EB%8B%A4-%EA%B7%B8%EB%9F%B0%EB%8D%B0-%EA%B3%A0%EB%AF%BC%EB%8F%84-\" aria-label=\"학습 시간이 늘었다 그런데 고민도  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>학습 시간이 늘었다 그런데 고민도 …</h3>\n<p>예정대로면 지난 목요일에 새로운 팀프로젝트가 시작이였다. 그러나 여러 캠퍼들의 의견을 반영하여 개인 학습의 시간이 더 늘어났다. 나도 사실 그 소식을 듣고 조금 좋았다. 프로젝트는 정말정말 재밌지만 ‘벌써 또 시작이야?’ 라는 생각이 들 정도로 조금은 지쳐있어서 그랬나싶다. 현재 듣고 있는 ‘Django 심화’ 강의가 이전에 들었던 그 어떤 강의보다 학습기간이 길었다. 모든 강의가 다 나에게는 새로운 라이브러리, 기술이였다. 그래서 만약 프로젝트가 중간에 시작되었다면, 심화 강의는 다 듣지 못한 채 프로젝트로 또 시간을 쏟아부었을 것이다. 어쨌든 어느정도 쉼을 가지면서 학습하고 있는 지금이 정말 좋다. 또 숨가쁘게 공부하느라 복습하기가 쉽지 않았는데 매일 오전 튜터님들이 파이썬, 장고, 머신러닝 보충강의를 해주셔서 배웠던 것을 다시 곱씹을 수 있는 시간도 가질 수 있었다. 문제는 알면 알수록 더 공부해야할 것이, 공부하고 싶어하는 것이 늘어나는데 시간은 한정되어 있다는 느낌을 받는다. 또, 내가 지금 잘 준비를 하고 있는가? 내 실력을 상승하고 있는가? 에 대해서도 계속 생각하게 된다. 나는 이 교육을 마치면 세상에 무언가 선한 영향을 미치는 기업에서 일을 하고 있을까 라는 고민도 함께 말이다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#the-four-fs-facts-feelings-fidings-futures\">The four F’s (Facts, Feelings, Fidings, Futures)</a></p>\n<ul>\n<li><a href=\"#%ED%95%99%EC%8A%B5-%EC%8B%9C%EA%B0%84%EC%9D%B4-%EB%8A%98%EC%97%88%EB%8B%A4-%EA%B7%B8%EB%9F%B0%EB%8D%B0-%EA%B3%A0%EB%AF%BC%EB%8F%84-\">학습 시간이 늘었다 그런데 고민도 …</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"February 19, 2022","title":"(WIL) 학습 시간이 늘었다 그런데 고민도 ... - 2202 week3","categories":"WIL","author":"최중재(aziel)","emoji":"🐩"},"fields":{"slug":"/WIL/WIL-2022-02/WIL-2202-week3/"}},"site":{"siteMetadata":{"siteUrl":"https://joong8812.github.io","comments":{"utterances":{"repo":"joong8812/joong8812.github.io"}}}}},"pageContext":{"slug":"/TIL/TIL-2022-02/TIL-220218/","nextSlug":"/TIL/TIL-2022-02/TIL-220217/","prevSlug":"/WIL/WIL-2022-02/WIL-2202-week3/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}