{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/TIL/TIL-2021-12/TIL-211217/",
    "result": {"data":{"cur":{"id":"180103e8-fc7f-5465-8746-fbbe6bdaeefa","html":"<h2 id=\"linked-list링크드-리스트-연결리스트\" style=\"position:relative;\"><a href=\"#linked-list%EB%A7%81%ED%81%AC%EB%93%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8\" aria-label=\"linked list링크드 리스트 연결리스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linked List(링크드 리스트, 연결리스트)🚂</h2>\n<blockquote>\n<p>In computer science, a linked list is a linear collection of data elements whose order is not given by their physical placement in memory. Instead, each element points to the next. It is a data structure consisting of a collection of nodes which together represent a sequence.</p>\n</blockquote>\n<p>참조: <a href=\"https://en.wikipedia.org/wiki/Linked_list\">https://en.wikipedia.org/wiki/Linked_list</a></p>\n<p>(발번역중🥲) 컴퓨터 공학에서, 링크드 리스트는 데이터 요소들의 선형적 집합이고, 그 순서는 메모리 배치에 따라 정해지는 것이 아니다. 대신에 각 요소는 다음 요소를 가리키고 있다. 이것은 순차적으로 표현 된 노드들 집합으로 이루어진 자료 구조다.</p>\n<ul>\n<li>화물 열차를 생각하면 쉽다\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">[</span>짐칸<span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span>짐칸<span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span>짐칸<span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n</li>\n<li>중간에 삽입/추가를 앞 뒤 포인터만 변경하면 된다. (가리키는 포인터를 잘 지정)\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">(</span>추가<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>짐칸<span class=\"token number\">1</span><span class=\"token punctuation\">]</span>             <span class=\"token punctuation\">[</span>짐칸<span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span>짐칸<span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n      ↘️ <span class=\"token punctuation\">[</span>승객칸<span class=\"token number\">1</span><span class=\"token punctuation\">]</span> ↗️\n\n<span class=\"token punctuation\">(</span>삭제<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>짐칸<span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>짐칸<span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n       <span class=\"token punctuation\">[</span>짐칸<span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n         ⬇️</code></pre></div>\n</li>\n<li>특정 원소 탐색 시, 처음 부터 끝까지 탐색할 수 있다. 시간복잡도 O(n)</li>\n<li>Python의 list는 배열로 구현 but 동적으로 원소 추가 가능 (Array, Linkedlist 짬뽕)</li>\n<li>클래스를 이용하여 Linked List를 구성하면 아래와 같다.\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n     self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n     self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n <span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">:</span>\n     <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n         self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n     <span class=\"token comment\"># 제일 끝에 노드 추가</span>\n     <span class=\"token keyword\">def</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n         <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>head <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n             self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">return</span>\n\n         cur <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n         <span class=\"token keyword\">while</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n             cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n         cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n     <span class=\"token comment\"># 모든 노드 출력</span>\n     <span class=\"token keyword\">def</span> <span class=\"token function\">print_all</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n         cur <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n         <span class=\"token keyword\">while</span> cur <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n             <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n             cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n     <span class=\"token comment\"># 특정 인덱스 노드 탐색</span>\n     <span class=\"token keyword\">def</span> <span class=\"token function\">get_node</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n         node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n         count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n         <span class=\"token keyword\">while</span> count <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">:</span>\n             node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n             count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n         <span class=\"token keyword\">return</span> node\n\n     <span class=\"token comment\"># 특정 인덱스에 노드 추가</span>\n     <span class=\"token keyword\">def</span> <span class=\"token function\">add_node</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n         new_node <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">if</span> index <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n             new_node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n             self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> new_node\n             <span class=\"token keyword\">return</span>\n\n         node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_node<span class=\"token punctuation\">(</span>index<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n         next_node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n         node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> new_node\n         new_node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> next_node\n\n     <span class=\"token comment\"># 특정 인덱스 노드 삭제</span>\n     <span class=\"token keyword\">def</span> <span class=\"token function\">delete_node</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n         <span class=\"token keyword\">if</span> index <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n             self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n             <span class=\"token keyword\">return</span>\n         node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_node<span class=\"token punctuation\">(</span>index<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n         node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n</code></pre></div>\n</li>\n<li>이제야 이해가 된 링크드 리스트!! 제발 내 머릿속에서 떠나지 말고 평생 있어줘~</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#linked-list%EB%A7%81%ED%81%AC%EB%93%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8\">Linked List(링크드 리스트, 연결리스트)🚂</a></li>\n</ul>\n</div>","excerpt":"Linked List(링크드 리스트, 연결리스트)🚂 In computer science, a linked list is a linear collection of data elements whose order is not given by their physical placement in memory. Instead, each element points to the next. It is a data structure consisting of a collection of nodes which together represent a sequence. 참조: https://en.wikipedia.org/wiki/Linked_list (발번역중🥲) 컴퓨터 공학에서, 링크드 리스트는 데이터 요소들의 선형적 집합이고, 그 순서는 메모리 배치에 따라 정해지는 것이 아니다. 대신에 각 요소는 다음 요소를 가리키고 있다. 이것은 순차적으로 표현 된 노드들 집합으로 이루어진 자료 구조다. 화물 열차를 생…","frontmatter":{"date":"December 17, 2021","title":"Today I Learned - 211217","categories":"TIL","author":"비럽코더","emoji":"🚂"},"fields":{"slug":"/TIL/TIL-2021-12/TIL-211217/"}},"next":{"id":"8fcf6ed4-d32a-5eb4-b16a-9ae14664030b","html":"<h2 id=\"part1-삼각형-회전-너무어렵다\" style=\"position:relative;\"><a href=\"#part1-%EC%82%BC%EA%B0%81%ED%98%95-%ED%9A%8C%EC%A0%84-%EB%84%88%EB%AC%B4%EC%96%B4%EB%A0%B5%EB%8B%A4\" aria-label=\"part1 삼각형 회전 너무어렵다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Part1. 삼각형 회전 (너무어렵다😭😭😭)</h2>\n<ul>\n<li>아래와 같은 삼각형을 보자 (시계방향을 돌린다고 생각)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">   <span class=\"token number\">1</span>             <span class=\"token number\">5</span>              <span class=\"token number\">9</span>              <span class=\"token number\">1</span>\n  <span class=\"token number\">234</span>     <span class=\"token operator\">-</span><span class=\"token operator\">></span>    <span class=\"token number\">762</span>    <span class=\"token operator\">-</span><span class=\"token operator\">></span>      <span class=\"token number\">487</span>     <span class=\"token operator\">-</span><span class=\"token operator\">></span>     <span class=\"token number\">234</span>\n <span class=\"token number\">56789</span>         <span class=\"token number\">98431</span>          <span class=\"token number\">13265</span>          <span class=\"token number\">56789</span></code></pre></div>\n<ul>\n<li>\n<p>한 번만 시계방향으로 돌린 경우</p>\n<ul>\n<li>입력: <code class=\"language-text\">['1', '234', '56789']</code>, 출력: <code class=\"language-text\">['5', '762', '98431']</code></li>\n</ul>\n</li>\n<li>\n<p>어떤 로직을 거쳐 위와 같은 출력이 나올 수 있을까?</p>\n<ul>\n<li>(0,0) ~ (5,5) 좌표평면으로 나타내서 돌린 다음 각 수의 위치와 이전 수와의 관계성을 찾으면 풀 수 있지 않을까? 고민 해 보았지만 풀지 못했다.</li>\n</ul>\n</li>\n<li>\n<p>입/출력을 보고 리스트에 한 개씩 값을 변경 해보자 (한 팀원 분이 해결해주셨다🙂)</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">list_length<span class=\"token punctuation\">:</span><span class=\"token number\">3</span>\n\nindex<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">2</span> \n<span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#######################################</span>\nindex<span class=\"token punctuation\">:</span>   <span class=\"token number\">1</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">1</span> \n<span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'234'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">]</span>\n\nindex<span class=\"token punctuation\">:</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">2</span> \n<span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'34'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'31'</span><span class=\"token punctuation\">]</span>\n\nindex<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">(</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">2</span> \n<span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'431'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#######################################</span>\nindex<span class=\"token punctuation\">:</span>     <span class=\"token number\">2</span><span class=\"token punctuation\">(</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'56789'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'431'</span><span class=\"token punctuation\">]</span>\n\nindex<span class=\"token punctuation\">:</span>    <span class=\"token number\">2</span><span class=\"token punctuation\">(</span><span class=\"token string\">'6'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'6789'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'62'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'431'</span><span class=\"token punctuation\">]</span>\n\nindex<span class=\"token punctuation\">:</span>   <span class=\"token number\">2</span><span class=\"token punctuation\">(</span><span class=\"token string\">'7'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'789'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'762'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'431'</span><span class=\"token punctuation\">]</span>\n\nindex<span class=\"token punctuation\">:</span>  <span class=\"token number\">2</span><span class=\"token punctuation\">(</span><span class=\"token string\">'8'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'89'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'762'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'8431'</span><span class=\"token punctuation\">]</span>\n\nindex<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">(</span><span class=\"token string\">'9'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'762'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'98431'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>\n<p>각 인덱스의 첫번째 문자만 보면 아래와 같은 규칙을 찾을 수 있었다.</p>\n<ul>\n<li>첫번째 문자의 이동 위치(index) = length - 1 - (입력 리스트에서 현재 이동하고자 하는 문자의 index)</li>\n</ul>\n</li>\n<li>\n<p>그런데 그 다음 문자 부터 재밌다. 각 index에서 처음 문자의 다음 2개의 문자는 그 처음문자 index(변경된)+1 로 위치가 변경 된다. 그 다음 2개의 문자는 처음문자 index(변경된)+2</p>\n<ul>\n<li>ex) 5 (2->0), 67 (2->1), 89 (2->2)</li>\n<li>첫번쨰 이후 다음 문자의 이동 위치(index) = length - (입력 리스트에서 현재 이동하고자 하는 문자의 index) - 1 + ((같은 인덱스 문자열 안에서의 현재 이동하고자 하는 문자의 index +1) // 2)</li>\n</ul>\n</li>\n<li>\n<p>코드로 말해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'234'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'56789'</span><span class=\"token punctuation\">]</span>\n\ninput_size <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span>\noutput_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>input_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> input_index<span class=\"token punctuation\">,</span> set_numbers <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">for</span> char_index_in_current_string<span class=\"token punctuation\">,</span> char <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>set_numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      pos <span class=\"token operator\">=</span> input_size <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> input_index <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>char_index_in_current_string<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n      output_list<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> char <span class=\"token operator\">+</span> output_list<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>output_list<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"느낀점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80%EC%A0%90\" aria-label=\"느낀점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀점❗</h3>\n<ul>\n<li>알고리즘 문제는 아예 어떻게 풀어야 할 지 접근 자체를 못해서 못 푸는 경우가 많다. 이 문제도 그랬다. 머리가 유연하게 잘 돌아갔으면 좋겠다.</li>\n<li>머리로 이해한 걸 글로 풀어 쓰는 게 정말 어렵다.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#part1-%EC%82%BC%EA%B0%81%ED%98%95-%ED%9A%8C%EC%A0%84-%EB%84%88%EB%AC%B4%EC%96%B4%EB%A0%B5%EB%8B%A4\">Part1. 삼각형 회전 (너무어렵다😭😭😭)</a></p>\n<ul>\n<li><a href=\"#%EB%8A%90%EB%82%80%EC%A0%90\">느낀점❗</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 16, 2021","title":"Today I Learned - 211216","categories":"TIL","author":"비럽코더","emoji":"🦭"},"fields":{"slug":"/TIL/TIL-2021-12/TIL-211216/"}},"prev":{"id":"be7114a0-db94-57f6-80a7-cb89207dedd0","html":"<h2 id=\"facts\" style=\"position:relative;\"><a href=\"#facts\" aria-label=\"facts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Facts</h2>\n<p>지난 월요일, <code class=\"language-text\">스파르타코딩클럽 AI 웹개발</code> 교육이 시작 되었다. 100명의 교육생이 <code class=\"language-text\">게더타운</code>에 모여 하루 12시간씩 몰입하여 공부하였다. 이번 주는 파이썬 기초, 웹프로그래밍, 자료구조/알고리즘 강의를 통해 지식과 기술을 습득하였다. 그리고 스스로 학습의 방향을 잘 잡을 수 있도록 수요일에는 <code class=\"language-text\">타임어택</code> 시간을 가졌다. 주어진 1시간 30분동안 제시해 준 화면과 기능 구현하는 것이다. 5명이 한 팀을 이루었다. 매일 <code class=\"language-text\">알고리즘</code> 스터디를 진행 중이다.</p>\n<h2 id=\"feelings\" style=\"position:relative;\"><a href=\"#feelings\" aria-label=\"feelings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Feelings</h2>\n<p><code class=\"language-text\">웹개발자</code>로 커리어로 전환하고자 결심 한 뒤, 혼자 공부하고 준비하는 게 너무 외로웠다. 스파르타에서 같은 목표를 가진 동료들을 99명이나 만나게 되어 정말 행복하다. 실제로 교육을 진행하면서 슬랙 혹은 게더타운에서 서로 모르고 어려운 것을 질문하고 답을 하며 소통하니 문제들이 빨리 해결되었다. 학습자료가 주어지고 스스로 공부를 하는 교육이다 보니, 처음에는 너무 방치(?) 해 두는 건 아닌가 싶었는데, 조금씩 적응을 하면서 <code class=\"language-text\">스스로 학습하는 개발자</code>가 되도록 돕는 스파르타만의 특별한 교육방식인 것 같다는 생각을 했다. 그리고 이 훈련이 더 강한 개발자로 가는 좋은 밑거름이 되리라는 믿음이 생겼다.</p>\n<h2 id=\"findings\" style=\"position:relative;\"><a href=\"#findings\" aria-label=\"findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Findings</h2>\n<p><code class=\"language-text\">타임어택</code> 시간을 가지면서 이렇게 짧은 시간에도 많은 것을 구현해 낼 줄 알아야 하는구나 라는 생각이 들었다. 실제 현업에 가면 완벽하게 요구사항에 맞게 구현하는 것도 중요하지만 시간 내에 해야하는 것도 중요하다 했다. 아직 주어진 데이터를 API서버에서 받는 것은 배우지 못한 상태에서 했던 챌린지였지만 어떻게든 구현하고자 하는 의지를 가지고 데이터를 서버에서 받았다 생각하고 프론트 부분을 구현했다. 이것이 옳은 방향인지는 모르겠으나 끝까지 포기하지 않고 최대한 해보려했다는 것에서 스스로에게 점수를 주고 싶다.</p>\n<h2 id=\"future\" style=\"position:relative;\"><a href=\"#future\" aria-label=\"future permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Future</h2>\n<p>1주일 밖에 안 지났지만, 많은 것들을 깨닫는 시간이었다. 다른 분들의 어려움에 흔쾌히 자신의 시간을 내어 열심히 답해주시는 분들도 있고, 좋은 자료가 있으면 바로바로 공유 해주시는 분도 있고, 기가 막히게 알고리즘 문제를 푸는 분 있는 등 멋진 분들이 많다. 나도 문제해결도 잘하고 지식 공유에도 앞장 서는 사람이 되고 싶다. 당장은 다른 것보다, 내가 다른 사람에게 많은 것을 배우듯이 블로그를 통해 자그만 지식공유를 꾸준히 잘하고 싶다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#facts\">Facts</a></li>\n<li><a href=\"#feelings\">Feelings</a></li>\n<li><a href=\"#findings\">Findings</a></li>\n<li><a href=\"#future\">Future</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 18, 2021","title":"Week I Learned - 2112-week3","categories":"WIL","author":"비럽코더","emoji":"☀️"},"fields":{"slug":"/WIL/WIL-2021-12/WIL-2112-week3/"}},"site":{"siteMetadata":{"siteUrl":"https://joong8812.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/TIL/TIL-2021-12/TIL-211217/","nextSlug":"/TIL/TIL-2021-12/TIL-211216/","prevSlug":"/WIL/WIL-2021-12/WIL-2112-week3/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}