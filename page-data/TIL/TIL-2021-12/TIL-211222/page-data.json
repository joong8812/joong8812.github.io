{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/TIL/TIL-2021-12/TIL-211222/",
    "result": {"data":{"cur":{"id":"1dacaab3-f99e-5494-b1c9-8476d52d8418","html":"<h2 id=\"턴제-rpg-게임-만들기\" style=\"position:relative;\"><a href=\"#%ED%84%B4%EC%A0%9C-rpg-%EA%B2%8C%EC%9E%84-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"턴제 rpg 게임 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>턴제 RPG 게임 만들기</h2>\n<h3 id=\"1-개요\" style=\"position:relative;\"><a href=\"#1-%EA%B0%9C%EC%9A%94\" aria-label=\"1 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 개요</h3>\n<p>드디어! 어릴 적 부터 좋아했던 <code class=\"language-text\">RPG게임</code>이다. 물론 내가 지금까지 해 온 것과 비교해서는 초라한 것이지만, 어떻게 몬스터와 전투를 하는 지 내가 직접 개발을 하며 들여다 볼 수가 있다. 이번 프로젝트에 주요 키는 <code class=\"language-text\">클래스</code>를 사용하는 것이다. 사용자와 몬스터간 1:3 대결이고, 사용자는 자신의 턴에 일반 공격과 마법공격 2가지 행동을 할 수가 있고, 몬스터는 회복, 대기, 공격 3가지 행동을 할 수 있다. 턴제 방식으로 전투가 진행되며 사용자가 먼저 행동 할 수 있다. 모든 몬스터의 체력이 0 이면 <code class=\"language-text\">승리</code> 반대의 경우 <code class=\"language-text\">패배</code> 이다.</p>\n<h3 id=\"2-로직\" style=\"position:relative;\"><a href=\"#2-%EB%A1%9C%EC%A7%81\" aria-label=\"2 로직 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 로직</h3>\n<p>1️⃣ 먼저 이름, 체력, 공격력을 멤버변수로, 상대방 공격 하는 함수를 멤버함수로 갖는 부모 클래스 Object를 만든다. 참, 현재 자신의 체력을 보여주는 클래스 내장함수 <code class=\"language-text\">__str__()</code>도 써보았다.<br>\n2️⃣ Object클래스를 상속받고 마법 공격을 하는 멤버 함수를 갖는 Player클래스, 마찬가지로 Object를 부모로 상속받고 대기, 회복을 멤버 함수로 갖는 Monster클래스를 만든다.<br>\n3️⃣ 현재 전투 중인 객체들의 체력 현황을 보여주는 함수를 만든다.<br>\n4️⃣ 사용자의 입력이 올바른지 검증하는 함수를 따로 만든다.(예외처리)<br>\n5️⃣ 사용자 턴 함수를 만들어 사용자가 입력한 대로 행동하게 한다.<br>\n6️⃣ 사용자 턴 이후 몬스터들의 체력 상황을 확인함수를 통해 0이하인 객체는 전투가능 리스트에서 제거한다. 그리고 몬스터가 몇 남았는지 리턴한다.<br>\n7️⃣ 몬스터 턴 함수를 만들어 각 몬스터가 랜덤으로 3가지(공격, 회복, 대기) 중 하나의 행동을 하게 한다.<br>\n8️⃣ 몬스터 턴 이후 사용자의 체력 상황을 파악하여 게임 종료 유무를 판단한다.<br>\n9️⃣ 전체 전투 가능자 체력 상황 프린트 -> 사용자턴 -> 몬스터 체력 확인 -> 몬스터턴 -> 사용자 체력 확인<br>\n🔟 게임 종료 전까지 해당 내용을 반복한다.</p>\n<h3 id=\"3-코드\" style=\"position:relative;\"><a href=\"#3-%EC%BD%94%EB%93%9C\" aria-label=\"3 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> random\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> hp<span class=\"token punctuation\">,</span> attack_damage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>hp <span class=\"token operator\">=</span> hp\n        self<span class=\"token punctuation\">.</span>attack_damage <span class=\"token operator\">=</span> attack_damage\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>name\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">be_attacked</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> attack_damage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>hp <span class=\"token operator\">-=</span> attack_damage\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_hp</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>hp\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">set_hp</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> hp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>hp <span class=\"token operator\">=</span> hp\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_attack_damage</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>attack_damage\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"[</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>get_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">] (이)가 [</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>target<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">] (을)를 일반공격을 했다.\"</span></span><span class=\"token punctuation\">)</span>\n        target<span class=\"token punctuation\">.</span>be_attacked<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>get_attack_damage<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>target<span class=\"token punctuation\">}</span></span><span class=\"token string\"> (-</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>get_attack_damage<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">)\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        msg <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"[</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>get_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">] 의 HP : </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>get_hp<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span> <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>get_hp<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"[</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>get_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">] (은)는 죽었습니다.\"</span></span>\n        <span class=\"token keyword\">return</span> msg\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">magic_attack</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"[</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>get_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">] (이)가 [</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>target<span class=\"token punctuation\">.</span>get_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">] (을)를 마법공격을 했다.\"</span></span><span class=\"token punctuation\">)</span>\n        target<span class=\"token punctuation\">.</span>be_attacked<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>target<span class=\"token punctuation\">}</span></span><span class=\"token string\"> (-50)\"</span></span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Monster</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">stay</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"[</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>get_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">] (이)가 대기했습니다.\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">heal</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>set_hp<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>get_hp<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"[</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>get_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">] (이)가 자신의 체력을 10만큼 회복했다.\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">}</span></span><span class=\"token string\"> (+10)\"</span></span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">print_players_status</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n *********** 각 플레이어의 현재 상태 ***********\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> player <span class=\"token keyword\">in</span> players<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">only_return_right_command</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> num_range<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    user_input <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">while</span> <span class=\"token keyword\">not</span> user_input<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            user_input <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>user_input<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>user_input <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token keyword\">or</span> user_input <span class=\"token operator\">></span> num_range<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">raise</span> ValueError\n        <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"보기에 있는 숫자만 입력 가능합니다\"</span><span class=\"token punctuation\">)</span>\n            user_input <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">return</span> user_input\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">player_turn</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    attack_method <span class=\"token operator\">=</span> only_return_right_command<span class=\"token punctuation\">(</span><span class=\"token string\">\"어떻게 공격하시겠습니까? (1.일반 2.마법) \"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n    msg_for_who_attack <span class=\"token operator\">=</span> <span class=\"token string\">\"누구를 공격하시겠습니까? (\"</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        msg_for_who_attack <span class=\"token operator\">+=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>players<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>get_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> \"</span></span>\n    msg_for_who_attack <span class=\"token operator\">=</span> msg_for_who_attack<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    msg_for_who_attack <span class=\"token operator\">+=</span> <span class=\"token string\">\") \"</span>\n    attack_target <span class=\"token operator\">=</span> only_return_right_command<span class=\"token punctuation\">(</span>msg_for_who_attack<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    players<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>attack<span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">[</span>attack_target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> attack_method <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> players<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>magic_attack<span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">[</span>attack_target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> players\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">check_monsters</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        monster <span class=\"token operator\">=</span> players<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> monster<span class=\"token punctuation\">.</span>get_hp<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            players<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">monsters_turn</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    player <span class=\"token operator\">=</span> players<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        monster <span class=\"token operator\">=</span> players<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        action <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randrange<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> action <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            monster<span class=\"token punctuation\">.</span>attack<span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> action <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            monster<span class=\"token punctuation\">.</span>heal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            monster<span class=\"token punctuation\">.</span>stay<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> players\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">check_player</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    alive <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">if</span> player<span class=\"token punctuation\">.</span>get_hp<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        alive <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">return</span> alive\n\n\nwarrior <span class=\"token operator\">=</span> Player<span class=\"token punctuation\">(</span><span class=\"token string\">\"최중재\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nmini_goblin <span class=\"token operator\">=</span> Monster<span class=\"token punctuation\">(</span><span class=\"token string\">\"미니고블린\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\ngoblin <span class=\"token operator\">=</span> Monster<span class=\"token punctuation\">(</span><span class=\"token string\">\"고블린\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\nsuper_goblin <span class=\"token operator\">=</span> Monster<span class=\"token punctuation\">(</span><span class=\"token string\">\"슈퍼고블린\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n\nbattle_players <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>warrior<span class=\"token punctuation\">,</span> mini_goblin<span class=\"token punctuation\">,</span> goblin<span class=\"token punctuation\">,</span> super_goblin<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    print_players_status<span class=\"token punctuation\">(</span>battle_players<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n ************* 턴 시작 *************\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"플레이어 턴\"</span><span class=\"token punctuation\">)</span>\n    battle_players <span class=\"token operator\">=</span> player_turn<span class=\"token punctuation\">(</span>battle_players<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> check_monsters<span class=\"token punctuation\">(</span>battle_players<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"승리\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n몬스터 턴\"</span><span class=\"token punctuation\">)</span>\n    battle_players <span class=\"token operator\">=</span> monsters_turn<span class=\"token punctuation\">(</span>battle_players<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> check_player<span class=\"token punctuation\">(</span>battle_players<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"패배\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span></code></pre></div>\n<h2 id=\"총평\" style=\"position:relative;\"><a href=\"#%EC%B4%9D%ED%8F%89\" aria-label=\"총평 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>총평</h2>\n<p>복잡한 프로그램은 아니지만, 이 게임을 코딩하면서 클래스 사용법에 대해서 한 번 더 생각해보고 정리가 됐던 시간이었다. 위에 짠 것 중 사용자 및 몬스터들 객체의 상태 변화가 함수안에서 적용되고 따로 그 객체들을 리턴해주지 않았다. 각 객체들이 변화된 값들을 잘 가지고 있었기 때문이다. 그런데 이는 좋게 짠 것이 아니라는 말을 듣고 즉시 리턴으로 다시 받아 수정된 객체리스트를 기존 객체리스트에 다시 넣어줬다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">monsters_turn</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    player <span class=\"token operator\">=</span> players<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        monster <span class=\"token operator\">=</span> players<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        action <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randrange<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> action <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            monster<span class=\"token punctuation\">.</span>attack<span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> action <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            monster<span class=\"token punctuation\">.</span>heal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            monster<span class=\"token punctuation\">.</span>stay<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> players\n\n<span class=\"token comment\"># ...</span>\n\nbattle_players <span class=\"token operator\">=</span> monsters_turn<span class=\"token punctuation\">(</span>battle_players<span class=\"token punctuation\">)</span></code></pre></div>\n<p>예를 들면 이 함수다. 이전에는 리턴값이 없었지만 지금은 리턴 해줘서 다시 기존 변수에 넣어줬다.<br>\n게임 개발을 해보셨던 분의 코드를 봤었는데, 그 짧은 시간안에 많은 걸 담아두셨었다. 예를 들면서 시놉시스라던지, 게임 종료 후 다시 시작이라 던지 등등 정말 <code class=\"language-text\">게임 요소</code>들을 많이 집어넣으셨었다. 디테일도 놓지 않는 프로 정신에 감명을 받았다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%84%B4%EC%A0%9C-rpg-%EA%B2%8C%EC%9E%84-%EB%A7%8C%EB%93%A4%EA%B8%B0\">턴제 RPG 게임 만들기</a></p>\n<ul>\n<li><a href=\"#1-%EA%B0%9C%EC%9A%94\">1. 개요</a></li>\n<li><a href=\"#2-%EB%A1%9C%EC%A7%81\">2. 로직</a></li>\n<li><a href=\"#3-%EC%BD%94%EB%93%9C\">3. 코드</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B4%9D%ED%8F%89\">총평</a></p>\n</li>\n</ul>\n</div>","excerpt":"턴제 RPG 게임 만들기 1. 개요 드디어! 어릴 적 부터 좋아했던 이다. 물론 내가 지금까지 해 온 것과 비교해서는 초라한 것이지만, 어떻게 몬스터와 전투를 하는 지 내가 직접 개발을 하며 들여다 볼 수가 있다. 이번 프로젝트에 주요 키는 를 사용하는 것이다. 사용자와 몬스터간 1:3 대결이고, 사용자는 자신의 턴에 일반 공격과 마법공격 2가지 행동을 할 수가 있고, 몬스터는 회복, 대기, 공격 3가지 행동을 할 수 있다. 턴제 방식으로 전투가 진행되며 사용자가 먼저 행동 할 수 있다. 모든 몬스터의 체력이 0 이면  반대의 경우  이다. 2. 로직 1️⃣ 먼저 이름, 체력, 공격력을 멤버변수로, 상대방 공격 하는 함수를 멤버함수로 갖는 부모 클래스 Object를 만든다. 참, 현재 자신의 체력을 보여주는 클래스 내장함수 도 써보았다. 2️⃣ Object클래스를 상속받고 마법 공격을 하는 멤버 함수를 갖는 Player클래스, 마찬가지로 Object를 부모로 상속받고 대기, 회복을 멤버 …","frontmatter":{"date":"December 22, 2021","title":"Today I Learned - 211222","categories":"TIL","author":"비럽코더","emoji":"🎮"},"fields":{"slug":"/TIL/TIL-2021-12/TIL-211222/"}},"next":{"id":"d394df3b-c39c-50d0-8efa-5622469fe89c","html":"<h2 id=\"베스킨라빈스-31-게임-만들기\" style=\"position:relative;\"><a href=\"#%EB%B2%A0%EC%8A%A4%ED%82%A8%EB%9D%BC%EB%B9%88%EC%8A%A4-31-%EA%B2%8C%EC%9E%84-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"베스킨라빈스 31 게임 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>베스킨라빈스 31 게임 만들기</h2>\n<h3 id=\"1-개요\" style=\"position:relative;\"><a href=\"#1-%EA%B0%9C%EC%9A%94\" aria-label=\"1 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 개요</h3>\n<p>“베스킨~ 라빈스~ 31!“. 좀 놀아보았다 하신 분들은 모를 수가 없는 게임. 각 게임 플레이어가 차례로 1~3 중의 수를 외쳐서 계속 수를 더하고, 마지막 31을 외치는 플레이어가 지는 게임이다. 컴퓨터와 사용자가 1:1 대결을 한다.</p>\n<h3 id=\"2-로직\" style=\"position:relative;\"><a href=\"#2-%EB%A1%9C%EC%A7%81\" aria-label=\"2 로직 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 로직</h3>\n<p>1️⃣ Random.randrange() 를 사용하여 누가 먼저 시작할지 정한다.<br>\n2️⃣ 컴퓨터가 말하는 함수를 만든다. 컴퓨터는 random 함수를 이용하여 1과 3 사이를 말하게 한다. 현재 숫자가 어떻게 변화 되고 있는 지는 한 변수를 정하여 누적하여 값을 더하며 확인한다.<br>\n3️⃣ 사용자가 말하는 함수를 만든다. 사용자의 숫자는 input()을 이용하여 받는다. 입력 예외처리 해준다. (1~3외에 값을 받지 못하게 한다)<br>\n4️⃣ 사용자 친화적으로 게임 진행상황을 출력해주는 함수를 만든다.<br>\n5️⃣ 누군가 31을 말하게 되면 상대방이 승리 했음을 알린다.</p>\n<h3 id=\"3-코드\" style=\"position:relative;\"><a href=\"#3-%EC%BD%94%EB%93%9C\" aria-label=\"3 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> random\n\n\n<span class=\"token comment\"># 컴퓨터가 말한다</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">com_say</span><span class=\"token punctuation\">(</span>cur_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        com_input <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randrange<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1 ~ 3 사이 입력</span>\n        <span class=\"token keyword\">if</span> is_under_equal_thirtyone<span class=\"token punctuation\">(</span>com_input<span class=\"token punctuation\">,</span> cur_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 입력 값이 31이하 인 경우만</span>\n            <span class=\"token keyword\">break</span>\n\n    <span class=\"token keyword\">return</span> cur_num<span class=\"token punctuation\">,</span> com_input\n\n\n<span class=\"token comment\"># 사용자가 말한다</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">user_say</span><span class=\"token punctuation\">(</span>cur_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    user_input <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token keyword\">not</span> user_input<span class=\"token punctuation\">:</span> <span class=\"token comment\"># 사용자 입력이 제대로 값을 가지지 않았다면</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            user_input <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>user_input<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>user_input <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token keyword\">or</span> user_input <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 정수형, 1~3사이</span>\n                <span class=\"token keyword\">raise</span> ValueError\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> is_under_equal_thirtyone<span class=\"token punctuation\">(</span>user_input<span class=\"token punctuation\">,</span> cur_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 31이하가 아니라면</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"최대 31 까지만 입력 할 수 있습니다\"</span><span class=\"token punctuation\">)</span>\n                user_input <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n                <span class=\"token keyword\">continue</span>\n        <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"유효한 수를 입력 해 주세요(1~3)\"</span><span class=\"token punctuation\">)</span>\n            user_input <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">return</span> cur_num<span class=\"token punctuation\">,</span> user_input\n\n\n<span class=\"token comment\"># 게임 진행 화면 출력한다</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">print_current_situation</span><span class=\"token punctuation\">(</span>who<span class=\"token punctuation\">,</span> say_num<span class=\"token punctuation\">,</span> cur_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    players <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"컴퓨터\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"사용자\"</span><span class=\"token punctuation\">]</span>\n    msg <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>players<span class=\"token punctuation\">[</span>who<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">:\"</span></span>\n    game_over <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>say_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        cur_num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        msg <span class=\"token operator\">+=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\" </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>cur_num<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n        <span class=\"token keyword\">if</span> cur_num <span class=\"token operator\">==</span> <span class=\"token number\">31</span><span class=\"token punctuation\">:</span>\n            msg <span class=\"token operator\">+=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"\\n</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>players<span class=\"token punctuation\">[</span><span class=\"token keyword\">not</span> who<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> 승\"</span></span>\n            game_over <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> cur_num<span class=\"token punctuation\">,</span> game_over\n\n\n<span class=\"token comment\"># 컴퓨터 &amp; 사용자 입력 값이 31 이하 인지 확인한다</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">is_under_equal_thirtyone</span><span class=\"token punctuation\">(</span>input_num<span class=\"token punctuation\">,</span> cur_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span> <span class=\"token keyword\">if</span> input_num <span class=\"token operator\">+</span> cur_num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">31</span> <span class=\"token keyword\">else</span> <span class=\"token boolean\">False</span>\n\n\n<span class=\"token comment\"># 0 is COM</span>\n<span class=\"token comment\"># 1 is USER</span>\nwho_turn <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randrange<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 누가 먼저 시작할 지 정한다</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"게임을 시작하지 ...\"</span><span class=\"token punctuation\">)</span>\ncur_num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    cur_num<span class=\"token punctuation\">,</span> num_said <span class=\"token operator\">=</span> com_say<span class=\"token punctuation\">(</span>cur_num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> who_turn <span class=\"token keyword\">else</span> user_say<span class=\"token punctuation\">(</span>cur_num<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 컴퓨터 또는 사용자 입력 값 받기</span>\n    cur_num<span class=\"token punctuation\">,</span> keep_game <span class=\"token operator\">=</span> print_current_situation<span class=\"token punctuation\">(</span>who_turn<span class=\"token punctuation\">,</span> num_said<span class=\"token punctuation\">,</span> cur_num<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> keep_game<span class=\"token punctuation\">:</span> <span class=\"token comment\"># 게임 진행 화면 출력 (game over return)</span>\n        <span class=\"token keyword\">break</span>\n    who_turn <span class=\"token operator\">=</span> <span class=\"token keyword\">not</span> who_turn <span class=\"token comment\"># 턴을 변경</span></code></pre></div>\n<hr>\n<h2 id=\"베스킨라빈스-31-인공지능-만들기\" style=\"position:relative;\"><a href=\"#%EB%B2%A0%EC%8A%A4%ED%82%A8%EB%9D%BC%EB%B9%88%EC%8A%A4-31-%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"베스킨라빈스 31 인공지능 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>베스킨라빈스 31 인공지능 만들기</h2>\n<h3 id=\"1-개요-1\" style=\"position:relative;\"><a href=\"#1-%EA%B0%9C%EC%9A%94-1\" aria-label=\"1 개요 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 개요</h3>\n<p>이번에는 같은 게임이지만, 컴퓨터가 똑똑해야 한다. 단순히 임의의 값을 말하는 것이 아니라 <code class=\"language-text\">필승이 되는 수들</code>을 말해야 한다. 우선 어떻게 해야 이 게임을 이길 수 있는가 봐야 한다. 우선은 먼저 26을 말하는 자가 반드시 승리할 수 있다. (다음 상대 말에 엉뚱하게 답만 하지 않는 다면..) 그렇다면! 어떻게 무조건 26을 말할 수 있을까? 이 이전에 4 작은 22을 말하면 된다. 이런식으로 계속 내려가다보면 <code class=\"language-text\">필승이 되는 수</code>를 알 수 있다. 그 수는 <code class=\"language-text\">26, 22, 18, 14, 10, 6, 2</code> 이며, 처음부터 <code class=\"language-text\">필승이 되는 수</code>만 말하게 되면 반드시 이길 수 있다.\n즉, 처음시작 할 때 2 값을 먼저 말하게 되고 게임을 진행 하면서 위에 열거 된 수만 말하게 된다면 반드시 이길 수 있게 된다. 컴퓨터는 사용자가 말하는 값을 보면서 다음 <code class=\"language-text\">필승이 되는 수</code>들만 말하면 된다. 단, 사용자가 먼저 2를 얘기하게 되고 <code class=\"language-text\">필승의 수</code>만 계속 말하게 되면 컴퓨터는 지게 된다.(유일한 컴퓨터 패배 조건)</p>\n<h3 id=\"2-로직-1\" style=\"position:relative;\"><a href=\"#2-%EB%A1%9C%EC%A7%81-1\" aria-label=\"2 로직 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 로직</h3>\n<p>1️⃣ 위 코드를 그대로 가져오자. 그리고 컴퓨터가 말하는 함수안에서 코드(머리) 몇 줄 추가 해주면 끝난다.<br>\n2️⃣ 컴퓨터는 현재까지 진행 된 수(cur_num)를 보고 자신이 말할 수 있는 수(cur+1, cur+2, cur+3) 중 필승의 수를 말한다. 필승 수에서 2를 더하거나 뺀 후 4로 나눴을 때 나머지가 0 이다.</p>\n<h3 id=\"3-코드-1\" style=\"position:relative;\"><a href=\"#3-%EC%BD%94%EB%93%9C-1\" aria-label=\"3 코드 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> random\n\n\n<span class=\"token comment\"># 컴퓨터가 말한다</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">com_say</span><span class=\"token punctuation\">(</span>cur_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    can_say_num <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>cur_num<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> cur_num<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 컴퓨터가 말할 수 있는 숫자를 리스트에 담는다</span>\n    com_input <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> can_say_num<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 필승 조건에 부합하는 수가 있는 지 확인</span>\n            com_input <span class=\"token operator\">=</span> num <span class=\"token operator\">-</span> cur_num <span class=\"token comment\"># 컴퓨터 입력 숫자를 도출</span>\n\n    <span class=\"token keyword\">if</span> com_input <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 필승 조건 값을 입력 할 수 없다면 ...</span>\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            com_input <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randrange<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1 ~ 3 사이 입력</span>\n            <span class=\"token keyword\">if</span> is_under_equal_thirtyone<span class=\"token punctuation\">(</span>com_input<span class=\"token punctuation\">,</span> cur_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 입력 값이 31이하 인 경우만</span>\n                <span class=\"token keyword\">break</span>\n\n    <span class=\"token keyword\">return</span> cur_num<span class=\"token punctuation\">,</span> com_input\n    \n    <span class=\"token comment\"># 아래는 생략 (위와 동일)</span></code></pre></div>\n<h2 id=\"총평\" style=\"position:relative;\"><a href=\"#%EC%B4%9D%ED%8F%89\" aria-label=\"총평 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>총평</h2>\n<p><code class=\"language-text\">베스킨라빈스31</code> 이 게임에 이런 비밀이 있는 지 몰랐다. 게임을 할 때 아무 생각 없이 숫자를 불렀었는데 말이다. 이 게임도 그렇고 요즘 알고리즘 문제를 풀면서도 이런 생각을 했다. 어떤 규칙을 찾고 그 규칙을 코드로 표현 하는 게 생각만큼 쉽지가 않다. 뭔가 반복성과 규칙이 보이는데도 코드로 옮기는 게 어렵다. 현재 나를 보니 부족함이 많아 슬프지만, 계속 문제들을 풀고 해결하다보면 사고의 유연함과 구현력이 생기리라 믿고 오늘도 열심히 문제들을 풀어 나가겠다.<br>\n<code class=\"language-text\">[추가]</code> 처음 구현할 때 현재 진행 중인 숫자를 전역변수로 사용했는데, 튜터님이 그건 좋은 방법이 아니라 해서 매개변수로 넣고 리턴해주는 방식으로 누적되는 값을 계속 기억하게 했다. 전역변수 사용을 지양하자!</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%B2%A0%EC%8A%A4%ED%82%A8%EB%9D%BC%EB%B9%88%EC%8A%A4-31-%EA%B2%8C%EC%9E%84-%EB%A7%8C%EB%93%A4%EA%B8%B0\">베스킨라빈스 31 게임 만들기</a></p>\n<ul>\n<li><a href=\"#1-%EA%B0%9C%EC%9A%94\">1. 개요</a></li>\n<li><a href=\"#2-%EB%A1%9C%EC%A7%81\">2. 로직</a></li>\n<li><a href=\"#3-%EC%BD%94%EB%93%9C\">3. 코드</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B2%A0%EC%8A%A4%ED%82%A8%EB%9D%BC%EB%B9%88%EC%8A%A4-31-%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5-%EB%A7%8C%EB%93%A4%EA%B8%B0\">베스킨라빈스 31 인공지능 만들기</a></p>\n<ul>\n<li><a href=\"#1-%EA%B0%9C%EC%9A%94-1\">1. 개요</a></li>\n<li><a href=\"#2-%EB%A1%9C%EC%A7%81-1\">2. 로직</a></li>\n<li><a href=\"#3-%EC%BD%94%EB%93%9C-1\">3. 코드</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B4%9D%ED%8F%89\">총평</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 21, 2021","title":"Today I Learned - 211221","categories":"TIL","author":"비럽코더","emoji":"🍦"},"fields":{"slug":"/TIL/TIL-2021-12/TIL-211221/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://joong8812.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/TIL/TIL-2021-12/TIL-211222/","nextSlug":"/TIL/TIL-2021-12/TIL-211221/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}