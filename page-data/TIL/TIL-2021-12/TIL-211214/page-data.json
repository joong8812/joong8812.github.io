{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/TIL/TIL-2021-12/TIL-211214/",
    "result": {"data":{"cur":{"id":"1b8754a8-a351-5c64-a4db-cfd18249ab48","html":"<h2 id=\"part-1-python-한-줄-코딩-하기\" style=\"position:relative;\"><a href=\"#part-1-python-%ED%95%9C-%EC%A4%84-%EC%BD%94%EB%94%A9-%ED%95%98%EA%B8%B0\" aria-label=\"part 1 python 한 줄 코딩 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Part 1. Python 한 줄 코딩 하기</h2>\n<ul>\n<li>\n<p>한줄 if 문</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># one line for if</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n\nresult <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'even'</span> <span class=\"token keyword\">if</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token string\">'odd'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>num<span class=\"token punctuation\">}</span></span><span class=\"token string\">은 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">}</span></span><span class=\"token string\">입니다\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>한 줄 for문</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># one line for for</span>\nold_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\nnew_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>a<span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token keyword\">for</span> a <span class=\"token keyword\">in</span> old_list<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>new_list<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>filter - list의 모든 원소 중 특별한 것만 뽑기</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">people <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'강아지'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'송아지'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">38</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'고양이'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'라이언'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">17</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\nresult <span class=\"token operator\">=</span> <span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> people<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>*args 매개변수</p>\n<ul>\n<li>매개변수명 변경가능, 여러 매개 변수 list에 담기\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> args<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">야 집에 가자~\"</span></span><span class=\"token punctuation\">)</span>\ncall<span class=\"token punctuation\">(</span><span class=\"token string\">'쿠니'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'벼리'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'달이'</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>**kwargs 매개변수</p>\n<ul>\n<li>매개변수명 변경가능, 여러 매개 변수 dict에 담기\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>kwargs<span class=\"token punctuation\">)</span>\n\ncall<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'bob'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">=</span><span class=\"token number\">180</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"part-2-이렇게-접근-하는-거였어--feat-알고리즘-문제\" style=\"position:relative;\"><a href=\"#part-2-%EC%9D%B4%EB%A0%87%EA%B2%8C-%EC%A0%91%EA%B7%BC-%ED%95%98%EB%8A%94-%EA%B1%B0%EC%98%80%EC%96%B4--feat-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C\" aria-label=\"part 2 이렇게 접근 하는 거였어  feat 알고리즘 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Part 2. 이렇게 접근 하는 거였어? 🙄 (Feat. 알고리즘 문제)</h2>\n<ul>\n<li>알고리즘 강의를 듣다 아래와 같은 문제를 만났다.\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Q. 다음과 같이 0 혹은 양의 정수로만 이루어진 배열이 있을 때, 왼쪽부터 오른쪽으로 하나씩 모든 숫자를 확인하며 숫자 사이에 '✕' 혹은 '+' 연산자를 넣어 결과적으로 가장 큰 수를 구하는 프로그램을 작성하시오. \n\n단, '+' 보다 '✕' 를 먼저 계산하는 일반적인 방식과는 달리, 모든 연산은 왼쪽에서 순서대로 이루어진다.</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span> </code></pre></div>\n</li>\n<li>문제를 처음 보았는 때 내 머릿속 사고\n<ol>\n<li>모든 수를 곱셈으로 연산하면 가장 큰 수 나오는 거 아닌가?</li>\n<li>0을 보며 ‘그렇게는 쉽게 안 되겠네’ 라고 깨달음</li>\n<li>그렇다면 모든 경우의 수를 비교 하여 구해야 되나? ($2^6$번..?)</li>\n<li>저렇게 많은 연산을 하려면 어떻게..? (for문 덕지덕지? 재귀함수?)</li>\n<li>모르겠다.</li>\n</ol>\n</li>\n</ul>\n<br/>\n<ul>\n<li>정답을 보고 난 후\n<ol>\n<li>\n<p>모든 수를 곱할 때가 가장 큰 수가 나오는 것은 맞다.</p>\n</li>\n<li>\n<p>그런데, 0과 1을 곱할 때 문제가 생긴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\"># 최악이다.</span>\n<span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token comment\"># 그대로 나온다. -> 3 + 1 = 4가 낫다</span></code></pre></div>\n</li>\n<li>\n<p>위와 같은 경우는 더 해주고 나머지 수에 대해서 곱해주면 가장 큰 수를 구할 수 있다.</p>\n</li>\n<li>\n<p>알고리즘 문제에 경우 접근 자체를 어떻게 할 지 모를 경우</p>\n</li>\n<li>\n<p>무려 Facebook에서 낸 문제라고 한다. (역시 어려울 수 밖에 라고 스스로 위로 해 본다)</p>\n</li>\n</ol>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>정답 코드</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">find_max_value</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    multiply_sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> number <span class=\"token keyword\">in</span> array<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> number <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">or</span> multiply_sum <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            multiply_sum <span class=\"token operator\">+=</span> number\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            multiply_sum <span class=\"token operator\">*=</span> number\n    <span class=\"token keyword\">return</span> multiply_sum\n\n\nresult <span class=\"token operator\">=</span> find_max_value<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#part-1-python-%ED%95%9C-%EC%A4%84-%EC%BD%94%EB%94%A9-%ED%95%98%EA%B8%B0\">Part 1. Python 한 줄 코딩 하기</a></li>\n<li><a href=\"#part-2-%EC%9D%B4%EB%A0%87%EA%B2%8C-%EC%A0%91%EA%B7%BC-%ED%95%98%EB%8A%94-%EA%B1%B0%EC%98%80%EC%96%B4--feat-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C\">Part 2. 이렇게 접근 하는 거였어? 🙄 (Feat. 알고리즘 문제)</a></li>\n</ul>\n</div>","excerpt":"Part 1. Python 한 줄 코딩 하기 한줄 if 문 한 줄 for문 filter - list의 모든 원소 중 특별한 것만 뽑기 *args 매개변수 매개변수명 변경가능, 여러 매개 변수 list에 담기 **kwargs 매개변수 매개변수명 변경가능, 여러 매개 변수 dict에 담기 Part 2. 이렇게 접근 하는 거였어? 🙄 (Feat. 알고리즘 문제) 알고리즘 강의를 듣다 아래와 같은 문제를 만났다. 문제를 처음 보았는 때 내 머릿속 사고 모든 수를 곱셈으로 연산하면 가장 큰 수 나오는 거 아닌가? 0을 보며 ‘그렇게는 쉽게 안 되겠네’ 라고 깨달음 그렇다면 모든 경우의 수를 비교 하여 구해야 되나? ($2^6$번..?) 저렇게 많은 연산을 하려면 어떻게..? (for문 덕지덕지? 재귀함수?) 모르겠다. 정답을 보고 난 후 모든 수를 곱할 때가 가장 큰 수가 나오는 것은 맞다. 그런데, 0과 1을 곱할 때 문제가 생긴다. 위와 같은 경우는 더 해주고 나머지 수에 대해서 곱해주…","frontmatter":{"date":"December 14, 2021","title":"Today I Learned - 211214","categories":"TIL","author":"비럽코더","emoji":"💡"},"fields":{"slug":"/TIL/TIL-2021-12/TIL-211214/"}},"next":{"id":"d83f5966-3bd8-5e2a-a34a-9ad463a91d66","html":"<h1 id=\"다짐\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%A7%90\" aria-label=\"다짐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다짐</h1>\n<p>스파르타 코딩클럽 AI 웹개발 교육 시작과 함께 오늘부터 TIL을 실천 하겠습니다.</p>\n<hr>\n<h2 id=\"python-map\" style=\"position:relative;\"><a href=\"#python-map\" aria-label=\"python map permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[Python] map</h2>\n<p>띄어쓰기로 구분하여 2개의 입력 값을 받는 알고리즘 문제를 보았다.\n아래와 같은 방법으로 입력값을 받을 수 있음을 알았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">input_list <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그런데 저기서 <code class=\"language-text\">map</code>은 무엇이더냐?</p>\n<blockquote>\n<p>map(함수, 반복적인)</p>\n</blockquote>\n<p>리스트, 튜플과 같은 반복자의 모든 값들을 map의 첫번째 인자 함수에 적용 후 반복자를 리턴 해준다.</p>\n<blockquote>\n<p>map(function, iterable, …)</p>\n</blockquote>\n<p>Return an iterator that applies function to every item of iterable, yielding the results.</p>\n<p>[참조] <a href=\"https://docs.python.org/3/library/functions.html#map\">https://docs.python.org/3/library/functions.html#map</a></p>\n<p>예를 들어</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">ex_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4'</span><span class=\"token punctuation\">]</span>\ninput_list <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> ex_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>input_list<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># output</span>\n<span class=\"token comment\"># [1, 2, 3, 4]</span>\n</code></pre></div>\n<p>이 경우, 리스트의 담긴 각 문자열 값이 <code class=\"language-text\">map</code>안에서 int 내장함수를 거치면서 정수형을 담은 리스트가 되었다.</p>\n<p>iterable한 자료형의 각 값을 특정 함수에 거쳐 새로운 iterator를 만들 때 유용할 것 같다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#python-map\">[Python] map</a></li>\n<li><a href=\"#%EB%BD%80%EB%82%98%EC%8A%A4\">뽀나스</a></li>\n</ul>\n</div>\n<hr>\n<h2 id=\"뽀나스\" style=\"position:relative;\"><a href=\"#%EB%BD%80%EB%82%98%EC%8A%A4\" aria-label=\"뽀나스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>뽀나스</h2>\n<p>함께 공부하는 팀원 한 분을 통해서 아래와 같이 입력값을 받을 수도 있음을 알게 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>꼭 리스트화 하지 않아도 2개의 입력값 받기 가능!</p>\n<p>단, 2개 이상 값을 map이 리턴하면 에러가 난다. ex) 입력값 3 5 8</p>\n<div class=\"gatsby-highlight\" data-language=\"toc\"><pre class=\"language-toc\"><code class=\"language-toc\"></code></pre></div>","frontmatter":{"date":"December 13, 2021","title":"Today I Learned - 211213","categories":"TIL","author":"비럽코더","emoji":"🔥"},"fields":{"slug":"/TIL/TIL-2021-12/TIL-211213/"}},"prev":{"id":"224d3ef7-0e6e-527f-8347-a3dfcb0db3d5","html":"<h2 id=\"part-1-새로운-연산자feat-바다코끼리\" style=\"position:relative;\"><a href=\"#part-1-%EC%83%88%EB%A1%9C%EC%9A%B4-%EC%97%B0%EC%82%B0%EC%9E%90feat-%EB%B0%94%EB%8B%A4%EC%BD%94%EB%81%BC%EB%A6%AC\" aria-label=\"part 1 새로운 연산자feat 바다코끼리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Part 1. 새로운 연산자(Feat. 바다코끼리🦭)</h2>\n<ul>\n<li>\n<p><a href=\"https://www.acmicpc.net/problem/10951\"><code class=\"language-text\">백준 10951번</code></a> 문제 보고 입력의 끝을 어떻게 알 수 있지? 하고 멘붕.</p>\n</li>\n<li>\n<p><a href=\"https://www.acmicpc.net/step/2\">문제 클릭 전</a> <code class=\"language-text\">EOF</code> 라는 힌트를 봄</p>\n<blockquote>\n<p><code class=\"language-text\">EOF</code> stands for <code class=\"language-text\">End Of File</code>. This is the point in the program where the user cannot read the data anymore.</p>\n</blockquote>\n<p>참조: <a href=\"https://www.delftstack.com/howto/python/python-end-of-file/\">https://www.delftstack.com/howto/python/python-end-of-file/</a></p>\n<ul>\n<li><code class=\"language-text\">EOF</code>는 더 이상 데이터를 읽은 수 없는 파일의 끝이라는 의미이다.</li>\n</ul>\n</li>\n<li>\n<p>사용자 입력을 문제에 맞게 출력 해주다가 <code class=\"language-text\">EOF</code>만나면 종료시켜주면 되는 문제다.</p>\n</li>\n<li>\n<p>풀이1</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\ntest_cases <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># EOF를 받기 전까지 사용자 입력을 받는다(한 줄씩 리스트 형태로 담아줌)</span>\n\n<span class=\"token keyword\">for</span> case <span class=\"token keyword\">in</span> test_cases<span class=\"token punctuation\">:</span>\n    a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> case<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>풀이2</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> EOFError<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span>  </code></pre></div>\n<ul>\n<li>처음에 풀 때 아무 생각 없이 위와 같이 풀어 제출했는데,  EOFError라는 결과를 받게 되었다. 거기서 try ~ except 구문으로 해결해보면 어떨까 에서 착안함.</li>\n</ul>\n</li>\n<li>\n<p>풀이3 - Walrus Operator 사용 (Python 3.8 이상)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n\n<span class=\"token comment\"># := 연산자를 이용하면 조건문에서 변수에 값이 할당 된다!</span>\n<span class=\"token keyword\">while</span> case <span class=\"token punctuation\">:</span><span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> case<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>위에 <a href=\"https://www.delftstack.com/howto/python/python-end-of-file/\"><code class=\"language-text\">EOF</code></a>관련 글 보다가 알게 된 연산자를 이용해보았다. Python 3.8부터 제공하는 연산자인데, 코드 라인 수를 줄이는데 도움이 될 것 같다!!</li>\n<li><a href=\"https://docs.python.org/3/whatsnew/3.8.html#assignment-expressions\"><code class=\"language-text\">Python문서</code></a>를 보면 바다코끼리의 눈과 상아와 닮아서 <code class=\"language-text\">:=</code> Walrus operator라고 했다. 귀엽다.</li>\n</ul>\n</li>\n<li>\n<p>뽀나스</p>\n<ul>\n<li>Python에서 사용자 입력으로 EOF는 어떻게 입력 할 수 있을까?\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- *nix(유닉스,리눅스 계열): Ctrl-D\n- Windows: Ctrl-Z + Return</code></pre></div>\n참조: <a href=\"https://wikidocs.net/20464\">https://wikidocs.net/20464</a></li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#part-1-%EC%83%88%EB%A1%9C%EC%9A%B4-%EC%97%B0%EC%82%B0%EC%9E%90feat-%EB%B0%94%EB%8B%A4%EC%BD%94%EB%81%BC%EB%A6%AC\">Part 1. 새로운 연산자(Feat. 바다코끼리🦭)</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 15, 2021","title":"Today I Learned - 211215","categories":"TIL","author":"비럽코더","emoji":"🦭"},"fields":{"slug":"/TIL/TIL-2021-12/TIL-211215/"}},"site":{"siteMetadata":{"siteUrl":"https://joong8812.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/TIL/TIL-2021-12/TIL-211214/","nextSlug":"/TIL/TIL-2021-12/TIL-211213/","prevSlug":"/TIL/TIL-2021-12/TIL-211215/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}