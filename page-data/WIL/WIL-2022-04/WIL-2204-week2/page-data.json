{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/WIL/WIL-2022-04/WIL-2204-week2/",
    "result": {"data":{"cur":{"id":"be5be9bd-0f4a-5940-b973-dd1726b89dbb","html":"<h2 id=\"the-four-fs-facts-feelings-fidings-futures\" style=\"position:relative;\"><a href=\"#the-four-fs-facts-feelings-fidings-futures\" aria-label=\"the four fs facts feelings fidings futures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The four F’s (Facts, Feelings, Fidings, Futures)</h2>\n<h3 id=\"bye-and-hello\" style=\"position:relative;\"><a href=\"#bye-and-hello\" aria-label=\"bye and hello permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bye and Hello</h3>\n<p>4개월동안 진행되었던 <code class=\"language-text\">스파르타 내일배움캠프 AI 웹 백엔드 1기</code>가 끝이 났다. 인공지능, 딥러닝에 대한 이론 및 실습도 진행 해 보고, Django Ninja를 통해 Restful한 API 서버도 만들어보고, 테스트 주도 개발이 무엇인지도 배우고, AWS의 몇개 서비스를 통해 배포 및 CI/CD 구현도 하고, 고객 피드백을 통해 프로젝트 개선 작업도 해보는 등 많은 것들은 배우고 익혔다. 시작 전에는 이 곳에서 배움을 통해 백엔드 개발자로 취업 하려 하고 있겠지 생각 했는데, 여러 경험과 생각들을 통해서 지금은 프론트엔드 혹은 풀스택 개발자로 취업하려고 생각을 하고 있다. 감사하게도 이를 도울 수 있는 <code class=\"language-text\">딥브레인AI 풀스택 3기</code> 교육과정에 몸을 담게 되었다. 매주 토요일 딥브레인AI에서 사용하는 웹 기술스택을 배우고, 그들이 만들어 낸 솔루션을 활용하여 프로젝트를 해야 한다. 토요일만 수업을 하기 때문에 제대로 배우기가 어렵다고 판단이 된다. 그래도 다른 교육생들에 비해 나는 일을 안하고 있으니까 평일에 열심히 학습하여 잘 따라가야 할 것 같다. 더 나은 개발자가 되기 위해 계속 걸어가자!</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#the-four-fs-facts-feelings-fidings-futures\">The four F’s (Facts, Feelings, Fidings, Futures)</a></p>\n<ul>\n<li><a href=\"#bye-and-hello\">Bye and Hello</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"The four F’s (Facts, Feelings, Fidings, Futures) Bye and Hello 4개월동안 진행되었던 가 끝이 났다. 인공지능, 딥러닝에 대한 이론 및 실습도 진행 해 보고, Django Ninja를 통해 Restful한 API 서버도 만들어보고, 테스트 주도 개발이 무엇인지도 배우고, AWS의 몇개 서비스를 통해 배포 및 CI/CD 구현도 하고, 고객 피드백을 통해 프로젝트 개선 작업도 해보는 등 많은 것들은 배우고 익혔다. 시작 전에는 이 곳에서 배움을 통해 백엔드 개발자로 취업 하려 하고 있겠지 생각 했는데, 여러 경험과 생각들을 통해서 지금은 프론트엔드 혹은 풀스택 개발자로 취업하려고 생각을 하고 있다. 감사하게도 이를 도울 수 있는  교육과정에 몸을 담게 되었다. 매주 토요일 딥브레인AI에서 사용하는 웹 기술스택을 배우고, 그들이 만들어 낸 솔루션을 활용하여 프로젝트를 해야 한다. 토요일만 수업을 하기 때문에 제대로 배우기가 어렵다고 판단이…","frontmatter":{"date":"April 17, 2022","title":"(WIL) Bye and Hello - 2204 week2","categories":"WIL","author":"코딩쿠니","emoji":"🏺"},"fields":{"slug":"/WIL/WIL-2022-04/WIL-2204-week2/"}},"next":{"id":"11b4f22c-26e9-5693-baf9-915c20d43215","html":"<h2 id=\"오잉-상태변화-할-때-값을-복사하고-한다\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EC%9E%89-%EC%83%81%ED%83%9C%EB%B3%80%ED%99%94-%ED%95%A0-%EB%95%8C-%EA%B0%92%EC%9D%84-%EB%B3%B5%EC%82%AC%ED%95%98%EA%B3%A0-%ED%95%9C%EB%8B%A4\" aria-label=\"오잉 상태변화 할 때 값을 복사하고 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오잉? 상태변화 할 때 값을 복사하고 한다?</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> squares <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>squares<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    squares<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'X'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>squares<span class=\"token operator\">:</span> squares<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 <code class=\"language-text\">squares</code>라는 배열의 state를 변경할 때 직접 해당 배열의 값을 변경하는 것이 아니라 <code class=\"language-text\">slice</code>를 사용하여 배열을 복사하고, 값을 변경하고, state 변화를 해준다. 직접 객체변경 혹은 데이터 변경이 이루어져도 결과는 같지만 이 immutability(불변성)이 가진 장점이 강력하기 때문에 React에서도 권장한다.</p>\n<h2 id=\"immutability-장점\" style=\"position:relative;\"><a href=\"#immutability-%EC%9E%A5%EC%A0%90\" aria-label=\"immutability 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>immutability 장점</h2>\n<h3 id=\"1-복잡한-특징을-단순하게\" style=\"position:relative;\"><a href=\"#1-%EB%B3%B5%EC%9E%A1%ED%95%9C-%ED%8A%B9%EC%A7%95%EC%9D%84-%EB%8B%A8%EC%88%9C%ED%95%98%EA%B2%8C\" aria-label=\"1 복잡한 특징을 단순하게 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 복잡한 특징을 단순하게</h3>\n<p><code class=\"language-text\">특정 행동을 취소하고 다시 실행하는 기능</code>을 위에 과정을 통해 쉽게 할 수 있다. 이전 데이터를 재사용하기 용이하다</p>\n<h3 id=\"2-변화-감지\" style=\"position:relative;\"><a href=\"#2-%EB%B3%80%ED%99%94-%EA%B0%90%EC%A7%80\" aria-label=\"2 변화 감지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 변화 감지</h3>\n<p>객체가 직접 수정이 이루어지면 변화 감지를 위해서 이전 사본과 전체 객체 트리를 돌며 비교해야 한다. 반면 immutable 객체는 이전 객체와 다르면 변화 했다고 빠르게 판단할 수 있다.</p>\n<h3 id=\"3-리렌더링-시기-결정\" style=\"position:relative;\"><a href=\"#3-%EB%A6%AC%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%8B%9C%EA%B8%B0-%EA%B2%B0%EC%A0%95\" aria-label=\"3 리렌더링 시기 결정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 리렌더링 시기 결정</h3>\n<p>React에서 <code class=\"language-text\">순수 컴포넌트</code>를 만드는데 도움을 주고, 성능을 최적화 할 수 있다. 직접적으로 값을 변경하면 매번 state변화와 함께 가상DOM에서 리렌더링이 발생하기 때문에 CPU에 미세한 낭비가 발생한다(규모가 커질수록 성능에 지대한 영향을 미칠수도 있다). 반면 immutable 객체를 활용하면 변화를 쉽게 감지하고 렌더링을 다시할 경우만 정의(shouldComponentUpdate 사용)하여 효율적으로 리렌더링을 할 수 있다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://ko.reactjs.org/tutorial/tutorial.html#why-immutability-is-important\">React documentation - 불변성이 왜 중요할까요?</a></li>\n<li><a href=\"https://ko.reactjs.org/docs/optimizing-performance.html#examples\">React documentation - 성능 최적화</a></li>\n<li><a href=\"https://velopert.com/3486\">React ❤️ Immutable.js – 리액트의 불변함, 그리고 컴포넌트에서 Immutable.js 사용하기</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%98%A4%EC%9E%89-%EC%83%81%ED%83%9C%EB%B3%80%ED%99%94-%ED%95%A0-%EB%95%8C-%EA%B0%92%EC%9D%84-%EB%B3%B5%EC%82%AC%ED%95%98%EA%B3%A0-%ED%95%9C%EB%8B%A4\">오잉? 상태변화 할 때 값을 복사하고 한다?</a></p>\n</li>\n<li>\n<p><a href=\"#immutability-%EC%9E%A5%EC%A0%90\">immutability 장점</a></p>\n<ul>\n<li><a href=\"#1-%EB%B3%B5%EC%9E%A1%ED%95%9C-%ED%8A%B9%EC%A7%95%EC%9D%84-%EB%8B%A8%EC%88%9C%ED%95%98%EA%B2%8C\">1. 복잡한 특징을 단순하게</a></li>\n<li><a href=\"#2-%EB%B3%80%ED%99%94-%EA%B0%90%EC%A7%80\">2. 변화 감지</a></li>\n<li><a href=\"#3-%EB%A6%AC%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%8B%9C%EA%B8%B0-%EA%B2%B0%EC%A0%95\">3. 리렌더링 시기 결정</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"April 15, 2022","title":"React immutability(불변성) 장점","categories":"TIL REACT","author":"코딩쿠니","emoji":"🔭"},"fields":{"slug":"/TIL/TIL-2022-04/TIL-220415/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://joong8812.github.io","comments":{"utterances":{"repo":"joong8812/joong8812.github.io"}}}}},"pageContext":{"slug":"/WIL/WIL-2022-04/WIL-2204-week2/","nextSlug":"/TIL/TIL-2022-04/TIL-220415/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}